
LcdController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004288  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800444c  0800444c  0001444c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800448c  0800448c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800448c  0800448c  0001448c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004494  08004494  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004494  08004494  00014494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004498  08004498  00014498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800449c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000070  0800450c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  0800450c  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec3b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c9f  00000000  00000000  0002ecdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00030980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  00031608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223c4  00000000  00000000  000321e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee2d  00000000  00000000  000545ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d21eb  00000000  00000000  000633d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001355c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003528  00000000  00000000  00135614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004434 	.word	0x08004434

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	08004434 	.word	0x08004434

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Timer interrupt handling (10us)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	if(htim == &htim9)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4a0f      	ldr	r2, [pc, #60]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d116      	bne.n	8000556 <HAL_TIM_PeriodElapsedCallback+0x3e>
	{
		if(lcdControllerGetDelayStatus(&lcd) == TRUE)
 8000528:	480e      	ldr	r0, [pc, #56]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800052a:	f003 fef9 	bl	8004320 <lcdControllerGetDelayStatus>
 800052e:	4603      	mov	r3, r0
 8000530:	2b01      	cmp	r3, #1
 8000532:	d102      	bne.n	800053a <HAL_TIM_PeriodElapsedCallback+0x22>
		{
			lcdControllerIncrementDelayCounter(&lcd);
 8000534:	480b      	ldr	r0, [pc, #44]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000536:	f003 ff00 	bl	800433a <lcdControllerIncrementDelayCounter>
		}

		if(lcdControllerGetEnableDelayStatus(&lcd) == TRUE)
 800053a:	480a      	ldr	r0, [pc, #40]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800053c:	f003 ff0e 	bl	800435c <lcdControllerGetEnableDelayStatus>
 8000540:	4603      	mov	r3, r0
 8000542:	2b01      	cmp	r3, #1
 8000544:	d102      	bne.n	800054c <HAL_TIM_PeriodElapsedCallback+0x34>
		{
			lcdControllerIncrementEnableDelayCounter(&lcd);
 8000546:	4807      	ldr	r0, [pc, #28]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000548:	f003 ff15 	bl	8004376 <lcdControllerIncrementEnableDelayCounter>
		}

		counterTimer1++;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3301      	adds	r3, #1
 8000552:	4a05      	ldr	r2, [pc, #20]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000554:	6013      	str	r3, [r2, #0]
	}
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	200000d4 	.word	0x200000d4
 8000564:	20000160 	.word	0x20000160
 8000568:	2000024c 	.word	0x2000024c

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b090      	sub	sp, #64	; 0x40
 8000570:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fc15 	bl	8000da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f909 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 fa2d 	bl	80009d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057e:	f000 fa01 	bl	8000984 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000582:	f000 f9c7 	bl	8000914 <MX_TIM9_Init>
  MX_TIM2_Init();
 8000586:	f000 f96d 	bl	8000864 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  lcdControllerInitStruct(&lcd,
 800058a:	2300      	movs	r3, #0
 800058c:	930e      	str	r3, [sp, #56]	; 0x38
 800058e:	4b70      	ldr	r3, [pc, #448]	; (8000750 <main+0x1e4>)
 8000590:	930d      	str	r3, [sp, #52]	; 0x34
 8000592:	2302      	movs	r3, #2
 8000594:	930c      	str	r3, [sp, #48]	; 0x30
 8000596:	4b6f      	ldr	r3, [pc, #444]	; (8000754 <main+0x1e8>)
 8000598:	930b      	str	r3, [sp, #44]	; 0x2c
 800059a:	2320      	movs	r3, #32
 800059c:	930a      	str	r3, [sp, #40]	; 0x28
 800059e:	4b6e      	ldr	r3, [pc, #440]	; (8000758 <main+0x1ec>)
 80005a0:	9309      	str	r3, [sp, #36]	; 0x24
 80005a2:	2310      	movs	r3, #16
 80005a4:	9308      	str	r3, [sp, #32]
 80005a6:	4b6c      	ldr	r3, [pc, #432]	; (8000758 <main+0x1ec>)
 80005a8:	9307      	str	r3, [sp, #28]
 80005aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ae:	9306      	str	r3, [sp, #24]
 80005b0:	4b69      	ldr	r3, [pc, #420]	; (8000758 <main+0x1ec>)
 80005b2:	9305      	str	r3, [sp, #20]
 80005b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b8:	9304      	str	r3, [sp, #16]
 80005ba:	4b68      	ldr	r3, [pc, #416]	; (800075c <main+0x1f0>)
 80005bc:	9303      	str	r3, [sp, #12]
 80005be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c2:	9302      	str	r3, [sp, #8]
 80005c4:	4b65      	ldr	r3, [pc, #404]	; (800075c <main+0x1f0>)
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	4b61      	ldr	r3, [pc, #388]	; (8000754 <main+0x1e8>)
 80005ce:	2240      	movs	r2, #64	; 0x40
 80005d0:	4961      	ldr	r1, [pc, #388]	; (8000758 <main+0x1ec>)
 80005d2:	4863      	ldr	r0, [pc, #396]	; (8000760 <main+0x1f4>)
 80005d4:	f003 f950 	bl	8003878 <lcdControllerInitStruct>
		  DB6_GPIO_Port, DB6_Pin,
		  DB7_GPIO_Port, DB7_Pin,
		  LCD_ON_OFF_GPIO_Port, LCD_ON_OFF_Pin,
		  &htim2, TIM_CHANNEL_1);

  HAL_Delay(250);
 80005d8:	20fa      	movs	r0, #250	; 0xfa
 80005da:	f000 fc53 	bl	8000e84 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005de:	2100      	movs	r1, #0
 80005e0:	485b      	ldr	r0, [pc, #364]	; (8000750 <main+0x1e4>)
 80005e2:	f001 fda5 	bl	8002130 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim9);
 80005e6:	485f      	ldr	r0, [pc, #380]	; (8000764 <main+0x1f8>)
 80005e8:	f001 fce2 	bl	8001fb0 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(lcdControllerIsInitialized(&lcd) == FALSE)
 80005ec:	485c      	ldr	r0, [pc, #368]	; (8000760 <main+0x1f4>)
 80005ee:	f003 fed3 	bl	8004398 <lcdControllerIsInitialized>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d103      	bne.n	8000600 <main+0x94>
	  {
		  lcdControllerInit(&lcd);
 80005f8:	4859      	ldr	r0, [pc, #356]	; (8000760 <main+0x1f4>)
 80005fa:	f003 fa13 	bl	8003a24 <lcdControllerInit>
		  continue;
 80005fe:	e0a6      	b.n	800074e <main+0x1e2>
	  }

	  if(counterTimer1 >= 100000)
 8000600:	4b59      	ldr	r3, [pc, #356]	; (8000768 <main+0x1fc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a59      	ldr	r2, [pc, #356]	; (800076c <main+0x200>)
 8000606:	4293      	cmp	r3, r2
 8000608:	f240 809e 	bls.w	8000748 <main+0x1dc>
	  {
		  counterTimer1 = 0;
 800060c:	4b56      	ldr	r3, [pc, #344]	; (8000768 <main+0x1fc>)
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]

		  if (test == 0)
 8000612:	4b57      	ldr	r3, [pc, #348]	; (8000770 <main+0x204>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	f040 8096 	bne.w	8000748 <main+0x1dc>
		  {
			  switch (counterTest)
 800061c:	4b55      	ldr	r3, [pc, #340]	; (8000774 <main+0x208>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b04      	cmp	r3, #4
 8000622:	f200 808d 	bhi.w	8000740 <main+0x1d4>
 8000626:	a201      	add	r2, pc, #4	; (adr r2, 800062c <main+0xc0>)
 8000628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062c:	08000641 	.word	0x08000641
 8000630:	08000675 	.word	0x08000675
 8000634:	080006a9 	.word	0x080006a9
 8000638:	080006dd 	.word	0x080006dd
 800063c:	08000711 	.word	0x08000711
			  {
			  	  case 0:
			  		  lcdControllerSetString(&lcd, ROW_0, string1);
 8000640:	4a4d      	ldr	r2, [pc, #308]	; (8000778 <main+0x20c>)
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	4846      	ldr	r0, [pc, #280]	; (8000760 <main+0x1f4>)
 8000646:	f003 fdc8 	bl	80041da <lcdControllerSetString>
			  		  lcdControllerSetString(&lcd, ROW_1, string2);
 800064a:	4a4c      	ldr	r2, [pc, #304]	; (800077c <main+0x210>)
 800064c:	21c0      	movs	r1, #192	; 0xc0
 800064e:	4844      	ldr	r0, [pc, #272]	; (8000760 <main+0x1f4>)
 8000650:	f003 fdc3 	bl	80041da <lcdControllerSetString>
			  		  lcdControllerSetString(&lcd, ROW_2, string3);
 8000654:	4a4a      	ldr	r2, [pc, #296]	; (8000780 <main+0x214>)
 8000656:	2190      	movs	r1, #144	; 0x90
 8000658:	4841      	ldr	r0, [pc, #260]	; (8000760 <main+0x1f4>)
 800065a:	f003 fdbe 	bl	80041da <lcdControllerSetString>
			  		  lcdControllerSetString(&lcd, ROW_3, string4);
 800065e:	4a49      	ldr	r2, [pc, #292]	; (8000784 <main+0x218>)
 8000660:	21d0      	movs	r1, #208	; 0xd0
 8000662:	483f      	ldr	r0, [pc, #252]	; (8000760 <main+0x1f4>)
 8000664:	f003 fdb9 	bl	80041da <lcdControllerSetString>
			  		  counterTest++;
 8000668:	4b42      	ldr	r3, [pc, #264]	; (8000774 <main+0x208>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	4a41      	ldr	r2, [pc, #260]	; (8000774 <main+0x208>)
 8000670:	6013      	str	r3, [r2, #0]
			  		  break;
 8000672:	e069      	b.n	8000748 <main+0x1dc>

			  	  case 1:
			  		  lcdControllerSetString(&lcd, ROW_0, string4);
 8000674:	4a43      	ldr	r2, [pc, #268]	; (8000784 <main+0x218>)
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	4839      	ldr	r0, [pc, #228]	; (8000760 <main+0x1f4>)
 800067a:	f003 fdae 	bl	80041da <lcdControllerSetString>
			  		  lcdControllerSetString(&lcd, ROW_1, string1);
 800067e:	4a3e      	ldr	r2, [pc, #248]	; (8000778 <main+0x20c>)
 8000680:	21c0      	movs	r1, #192	; 0xc0
 8000682:	4837      	ldr	r0, [pc, #220]	; (8000760 <main+0x1f4>)
 8000684:	f003 fda9 	bl	80041da <lcdControllerSetString>
			  		  lcdControllerSetString(&lcd, ROW_2, string2);
 8000688:	4a3c      	ldr	r2, [pc, #240]	; (800077c <main+0x210>)
 800068a:	2190      	movs	r1, #144	; 0x90
 800068c:	4834      	ldr	r0, [pc, #208]	; (8000760 <main+0x1f4>)
 800068e:	f003 fda4 	bl	80041da <lcdControllerSetString>
			  		  lcdControllerSetString(&lcd, ROW_3, string3);
 8000692:	4a3b      	ldr	r2, [pc, #236]	; (8000780 <main+0x214>)
 8000694:	21d0      	movs	r1, #208	; 0xd0
 8000696:	4832      	ldr	r0, [pc, #200]	; (8000760 <main+0x1f4>)
 8000698:	f003 fd9f 	bl	80041da <lcdControllerSetString>
			  		  counterTest++;
 800069c:	4b35      	ldr	r3, [pc, #212]	; (8000774 <main+0x208>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	4a34      	ldr	r2, [pc, #208]	; (8000774 <main+0x208>)
 80006a4:	6013      	str	r3, [r2, #0]
			  		  break;
 80006a6:	e04f      	b.n	8000748 <main+0x1dc>

			  	  case 2:
			  		  lcdControllerSetString(&lcd, ROW_0, string3);
 80006a8:	4a35      	ldr	r2, [pc, #212]	; (8000780 <main+0x214>)
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	482c      	ldr	r0, [pc, #176]	; (8000760 <main+0x1f4>)
 80006ae:	f003 fd94 	bl	80041da <lcdControllerSetString>
			  		  lcdControllerSetString(&lcd, ROW_1, string4);
 80006b2:	4a34      	ldr	r2, [pc, #208]	; (8000784 <main+0x218>)
 80006b4:	21c0      	movs	r1, #192	; 0xc0
 80006b6:	482a      	ldr	r0, [pc, #168]	; (8000760 <main+0x1f4>)
 80006b8:	f003 fd8f 	bl	80041da <lcdControllerSetString>
			  		  lcdControllerSetString(&lcd, ROW_2, string1);
 80006bc:	4a2e      	ldr	r2, [pc, #184]	; (8000778 <main+0x20c>)
 80006be:	2190      	movs	r1, #144	; 0x90
 80006c0:	4827      	ldr	r0, [pc, #156]	; (8000760 <main+0x1f4>)
 80006c2:	f003 fd8a 	bl	80041da <lcdControllerSetString>
			  		  lcdControllerSetString(&lcd, ROW_3, string2);
 80006c6:	4a2d      	ldr	r2, [pc, #180]	; (800077c <main+0x210>)
 80006c8:	21d0      	movs	r1, #208	; 0xd0
 80006ca:	4825      	ldr	r0, [pc, #148]	; (8000760 <main+0x1f4>)
 80006cc:	f003 fd85 	bl	80041da <lcdControllerSetString>
			  		  counterTest++;
 80006d0:	4b28      	ldr	r3, [pc, #160]	; (8000774 <main+0x208>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	4a27      	ldr	r2, [pc, #156]	; (8000774 <main+0x208>)
 80006d8:	6013      	str	r3, [r2, #0]
			  		  break;
 80006da:	e035      	b.n	8000748 <main+0x1dc>

			  	  case 3:
			  		  lcdControllerSetString(&lcd, ROW_0, string2);
 80006dc:	4a27      	ldr	r2, [pc, #156]	; (800077c <main+0x210>)
 80006de:	2180      	movs	r1, #128	; 0x80
 80006e0:	481f      	ldr	r0, [pc, #124]	; (8000760 <main+0x1f4>)
 80006e2:	f003 fd7a 	bl	80041da <lcdControllerSetString>
			  		  lcdControllerSetString(&lcd, ROW_1, string3);
 80006e6:	4a26      	ldr	r2, [pc, #152]	; (8000780 <main+0x214>)
 80006e8:	21c0      	movs	r1, #192	; 0xc0
 80006ea:	481d      	ldr	r0, [pc, #116]	; (8000760 <main+0x1f4>)
 80006ec:	f003 fd75 	bl	80041da <lcdControllerSetString>
			  		  lcdControllerSetString(&lcd, ROW_2, string4);
 80006f0:	4a24      	ldr	r2, [pc, #144]	; (8000784 <main+0x218>)
 80006f2:	2190      	movs	r1, #144	; 0x90
 80006f4:	481a      	ldr	r0, [pc, #104]	; (8000760 <main+0x1f4>)
 80006f6:	f003 fd70 	bl	80041da <lcdControllerSetString>
			  		  lcdControllerSetString(&lcd, ROW_3, string1);
 80006fa:	4a1f      	ldr	r2, [pc, #124]	; (8000778 <main+0x20c>)
 80006fc:	21d0      	movs	r1, #208	; 0xd0
 80006fe:	4818      	ldr	r0, [pc, #96]	; (8000760 <main+0x1f4>)
 8000700:	f003 fd6b 	bl	80041da <lcdControllerSetString>
			  		  counterTest++;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <main+0x208>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3301      	adds	r3, #1
 800070a:	4a1a      	ldr	r2, [pc, #104]	; (8000774 <main+0x208>)
 800070c:	6013      	str	r3, [r2, #0]
			  		  break;
 800070e:	e01b      	b.n	8000748 <main+0x1dc>

			  	  case 4:
			  		  lcdControllerSetString(&lcd, ROW_0, string5);
 8000710:	4a1d      	ldr	r2, [pc, #116]	; (8000788 <main+0x21c>)
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	4812      	ldr	r0, [pc, #72]	; (8000760 <main+0x1f4>)
 8000716:	f003 fd60 	bl	80041da <lcdControllerSetString>
			  		  lcdControllerSetString(&lcd, ROW_1, string5);
 800071a:	4a1b      	ldr	r2, [pc, #108]	; (8000788 <main+0x21c>)
 800071c:	21c0      	movs	r1, #192	; 0xc0
 800071e:	4810      	ldr	r0, [pc, #64]	; (8000760 <main+0x1f4>)
 8000720:	f003 fd5b 	bl	80041da <lcdControllerSetString>
			  		  lcdControllerSetString(&lcd, ROW_2, string5);
 8000724:	4a18      	ldr	r2, [pc, #96]	; (8000788 <main+0x21c>)
 8000726:	2190      	movs	r1, #144	; 0x90
 8000728:	480d      	ldr	r0, [pc, #52]	; (8000760 <main+0x1f4>)
 800072a:	f003 fd56 	bl	80041da <lcdControllerSetString>
			  		  lcdControllerSetString(&lcd, ROW_3, string5);
 800072e:	4a16      	ldr	r2, [pc, #88]	; (8000788 <main+0x21c>)
 8000730:	21d0      	movs	r1, #208	; 0xd0
 8000732:	480b      	ldr	r0, [pc, #44]	; (8000760 <main+0x1f4>)
 8000734:	f003 fd51 	bl	80041da <lcdControllerSetString>
			  		  counterTest = 0;
 8000738:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <main+0x208>)
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
			  		  break;
 800073e:	e003      	b.n	8000748 <main+0x1dc>

			  	  default:
			  		  counterTest = 0;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <main+0x208>)
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
			  		  break;
 8000746:	bf00      	nop

		  }

	  }

	  lcdControllerUpdate(&lcd);
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <main+0x1f4>)
 800074a:	f003 fc43 	bl	8003fd4 <lcdControllerUpdate>
	  if(lcdControllerIsInitialized(&lcd) == FALSE)
 800074e:	e74d      	b.n	80005ec <main+0x80>
 8000750:	2000008c 	.word	0x2000008c
 8000754:	40020800 	.word	0x40020800
 8000758:	40020400 	.word	0x40020400
 800075c:	40020000 	.word	0x40020000
 8000760:	20000160 	.word	0x20000160
 8000764:	200000d4 	.word	0x200000d4
 8000768:	2000024c 	.word	0x2000024c
 800076c:	0001869f 	.word	0x0001869f
 8000770:	20000248 	.word	0x20000248
 8000774:	20000250 	.word	0x20000250
 8000778:	20000000 	.word	0x20000000
 800077c:	20000014 	.word	0x20000014
 8000780:	20000028 	.word	0x20000028
 8000784:	2000003c 	.word	0x2000003c
 8000788:	20000050 	.word	0x20000050

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2234      	movs	r2, #52	; 0x34
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f003 fe2e 	bl	80043fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b29      	ldr	r3, [pc, #164]	; (800085c <SystemClock_Config+0xd0>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a28      	ldr	r2, [pc, #160]	; (800085c <SystemClock_Config+0xd0>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b26      	ldr	r3, [pc, #152]	; (800085c <SystemClock_Config+0xd0>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007cc:	2300      	movs	r3, #0
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	4b23      	ldr	r3, [pc, #140]	; (8000860 <SystemClock_Config+0xd4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <SystemClock_Config+0xd4>)
 80007da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <SystemClock_Config+0xd4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ec:	2302      	movs	r3, #2
 80007ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f4:	2310      	movs	r3, #16
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000800:	2308      	movs	r3, #8
 8000802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000804:	2350      	movs	r3, #80	; 0x50
 8000806:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000808:	2302      	movs	r3, #2
 800080a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000810:	2302      	movs	r3, #2
 8000812:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4618      	mov	r0, r3
 800081a:	f001 f8db 	bl	80019d4 <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000824:	f000 f956 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	230f      	movs	r3, #15
 800082a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082c:	2302      	movs	r3, #2
 800082e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	2101      	movs	r1, #1
 8000842:	4618      	mov	r0, r3
 8000844:	f000 fe02 	bl	800144c <HAL_RCC_ClockConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800084e:	f000 f941 	bl	8000ad4 <Error_Handler>
  }
}
 8000852:	bf00      	nop
 8000854:	3750      	adds	r7, #80	; 0x50
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40007000 	.word	0x40007000

08000864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086a:	f107 0320 	add.w	r3, r7, #32
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
 8000882:	615a      	str	r2, [r3, #20]
 8000884:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000886:	4b22      	ldr	r3, [pc, #136]	; (8000910 <MX_TIM2_Init+0xac>)
 8000888:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800088c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40-1;
 800088e:	4b20      	ldr	r3, [pc, #128]	; (8000910 <MX_TIM2_Init+0xac>)
 8000890:	2227      	movs	r2, #39	; 0x27
 8000892:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000894:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <MX_TIM2_Init+0xac>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 800089a:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <MX_TIM2_Init+0xac>)
 800089c:	2232      	movs	r2, #50	; 0x32
 800089e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_TIM2_Init+0xac>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_TIM2_Init+0xac>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008ac:	4818      	ldr	r0, [pc, #96]	; (8000910 <MX_TIM2_Init+0xac>)
 80008ae:	f001 fbef 	bl	8002090 <HAL_TIM_PWM_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80008b8:	f000 f90c 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008c4:	f107 0320 	add.w	r3, r7, #32
 80008c8:	4619      	mov	r1, r3
 80008ca:	4811      	ldr	r0, [pc, #68]	; (8000910 <MX_TIM2_Init+0xac>)
 80008cc:	f002 fac2 	bl	8002e54 <HAL_TIMEx_MasterConfigSynchronization>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80008d6:	f000 f8fd 	bl	8000ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008da:	2360      	movs	r3, #96	; 0x60
 80008dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80008de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	4619      	mov	r1, r3
 80008f2:	4807      	ldr	r0, [pc, #28]	; (8000910 <MX_TIM2_Init+0xac>)
 80008f4:	f001 fdec 	bl	80024d0 <HAL_TIM_PWM_ConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80008fe:	f000 f8e9 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000902:	4803      	ldr	r0, [pc, #12]	; (8000910 <MX_TIM2_Init+0xac>)
 8000904:	f000 f95c 	bl	8000bc0 <HAL_TIM_MspPostInit>

}
 8000908:	bf00      	nop
 800090a:	3728      	adds	r7, #40	; 0x28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000008c 	.word	0x2000008c

08000914 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091a:	463b      	mov	r3, r7
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_TIM9_Init+0x68>)
 8000928:	4a15      	ldr	r2, [pc, #84]	; (8000980 <MX_TIM9_Init+0x6c>)
 800092a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 5-1;
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_TIM9_Init+0x68>)
 800092e:	2204      	movs	r2, #4
 8000930:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_TIM9_Init+0x68>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 80;
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_TIM9_Init+0x68>)
 800093a:	2250      	movs	r2, #80	; 0x50
 800093c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_TIM9_Init+0x68>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000944:	4b0d      	ldr	r3, [pc, #52]	; (800097c <MX_TIM9_Init+0x68>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800094a:	480c      	ldr	r0, [pc, #48]	; (800097c <MX_TIM9_Init+0x68>)
 800094c:	f001 fae0 	bl	8001f10 <HAL_TIM_Base_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM9_Init+0x46>
  {
    Error_Handler();
 8000956:	f000 f8bd 	bl	8000ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_TIM9_Init+0x68>)
 8000966:	f001 fe75 	bl	8002654 <HAL_TIM_ConfigClockSource>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8000970:	f000 f8b0 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200000d4 	.word	0x200000d4
 8000980:	40014000 	.word	0x40014000

08000984 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_USART2_UART_Init+0x4c>)
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <MX_USART2_UART_Init+0x50>)
 800098c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_USART2_UART_Init+0x4c>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_USART2_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_USART2_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009bc:	f002 fada 	bl	8002f74 <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009c6:	f000 f885 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2000011c 	.word	0x2000011c
 80009d4:	40004400 	.word	0x40004400

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <MX_GPIO_Init+0xec>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a33      	ldr	r2, [pc, #204]	; (8000ac4 <MX_GPIO_Init+0xec>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b31      	ldr	r3, [pc, #196]	; (8000ac4 <MX_GPIO_Init+0xec>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ac4 <MX_GPIO_Init+0xec>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a2c      	ldr	r2, [pc, #176]	; (8000ac4 <MX_GPIO_Init+0xec>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <MX_GPIO_Init+0xec>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <MX_GPIO_Init+0xec>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a25      	ldr	r2, [pc, #148]	; (8000ac4 <MX_GPIO_Init+0xec>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <MX_GPIO_Init+0xec>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_ON_OFF_Pin|RW_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2182      	movs	r1, #130	; 0x82
 8000a46:	4820      	ldr	r0, [pc, #128]	; (8000ac8 <MX_GPIO_Init+0xf0>)
 8000a48:	f000 fce6 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB5_Pin|DB6_Pin|DB7_Pin|RS_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8000a52:	481e      	ldr	r0, [pc, #120]	; (8000acc <MX_GPIO_Init+0xf4>)
 8000a54:	f000 fce0 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DB4_Pin|EN_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000a5e:	481c      	ldr	r0, [pc, #112]	; (8000ad0 <MX_GPIO_Init+0xf8>)
 8000a60:	f000 fcda 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_ON_OFF_Pin RW_Pin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin|RW_Pin;
 8000a64:	2382      	movs	r3, #130	; 0x82
 8000a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4813      	ldr	r0, [pc, #76]	; (8000ac8 <MX_GPIO_Init+0xf0>)
 8000a7c:	f000 fb38 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB5_Pin DB6_Pin DB7_Pin RS_Pin */
  GPIO_InitStruct.Pin = DB5_Pin|DB6_Pin|DB7_Pin|RS_Pin;
 8000a80:	f44f 638e 	mov.w	r3, #1136	; 0x470
 8000a84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4619      	mov	r1, r3
 8000a98:	480c      	ldr	r0, [pc, #48]	; (8000acc <MX_GPIO_Init+0xf4>)
 8000a9a:	f000 fb29 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB4_Pin EN_Pin */
  GPIO_InitStruct.Pin = DB4_Pin|EN_Pin;
 8000a9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <MX_GPIO_Init+0xf8>)
 8000ab8:	f000 fb1a 	bl	80010f0 <HAL_GPIO_Init>

}
 8000abc:	bf00      	nop
 8000abe:	3720      	adds	r7, #32
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b40:	d10d      	bne.n	8000b5e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <HAL_TIM_Base_MspInit+0x48>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d115      	bne.n	8000bae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <HAL_TIM_Base_MspInit+0x4c>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a0c      	ldr	r2, [pc, #48]	; (8000bbc <HAL_TIM_Base_MspInit+0x4c>)
 8000b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_TIM_Base_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2018      	movs	r0, #24
 8000ba4:	f000 fa6d 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000ba8:	2018      	movs	r0, #24
 8000baa:	f000 fa86 	bl	80010ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40014000 	.word	0x40014000
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be0:	d11d      	bne.n	8000c1e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_TIM_MspPostInit+0x68>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <HAL_TIM_MspPostInit+0x68>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_TIM_MspPostInit+0x68>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_Pin;
 8000bfe:	2320      	movs	r3, #32
 8000c00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	4619      	mov	r1, r3
 8000c18:	4804      	ldr	r0, [pc, #16]	; (8000c2c <HAL_TIM_MspPostInit+0x6c>)
 8000c1a:	f000 fa69 	bl	80010f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3720      	adds	r7, #32
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000

08000c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_UART_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12b      	bne.n	8000caa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	; (8000cbc <HAL_UART_MspInit+0x8c>)
 8000ca6:	f000 fa23 	bl	80010f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	; 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40004400 	.word	0x40004400
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <UsageFault_Handler+0x4>

08000cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 f89a 	bl	8000e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000d1a:	f001 fad1 	bl	80022c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200000d4 	.word	0x200000d4

08000d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <SystemInit+0x20>)
 8000d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <SystemInit+0x20>)
 8000d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d50:	480d      	ldr	r0, [pc, #52]	; (8000d88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d52:	490e      	ldr	r1, [pc, #56]	; (8000d8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d54:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d68:	4c0b      	ldr	r4, [pc, #44]	; (8000d98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d76:	f7ff ffd7 	bl	8000d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f003 fb1b 	bl	80043b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7e:	f7ff fbf5 	bl	800056c <main>
  bx  lr    
 8000d82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d90:	0800449c 	.word	0x0800449c
  ldr r2, =_sbss
 8000d94:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d98:	20000258 	.word	0x20000258

08000d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC_IRQHandler>
	...

08000da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da4:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0d      	ldr	r2, [pc, #52]	; (8000de0 <HAL_Init+0x40>)
 8000daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <HAL_Init+0x40>)
 8000db6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <HAL_Init+0x40>)
 8000dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 f94f 	bl	800106c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dce:	200f      	movs	r0, #15
 8000dd0:	f000 f808 	bl	8000de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd4:	f7ff fe84 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023c00 	.word	0x40023c00

08000de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_InitTick+0x54>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_InitTick+0x58>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f967 	bl	80010d6 <HAL_SYSTICK_Config>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00e      	b.n	8000e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b0f      	cmp	r3, #15
 8000e16:	d80a      	bhi.n	8000e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e20:	f000 f92f 	bl	8001082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e24:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <HAL_InitTick+0x5c>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e000      	b.n	8000e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000064 	.word	0x20000064
 8000e3c:	2000006c 	.word	0x2000006c
 8000e40:	20000068 	.word	0x20000068

08000e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x20>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_IncTick+0x24>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_IncTick+0x24>)
 8000e56:	6013      	str	r3, [r2, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	2000006c 	.word	0x2000006c
 8000e68:	20000254 	.word	0x20000254

08000e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <HAL_GetTick+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000254 	.word	0x20000254

08000e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e8c:	f7ff ffee 	bl	8000e6c <HAL_GetTick>
 8000e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9c:	d005      	beq.n	8000eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_Delay+0x44>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eaa:	bf00      	nop
 8000eac:	f7ff ffde 	bl	8000e6c <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d8f7      	bhi.n	8000eac <HAL_Delay+0x28>
  {
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2000006c 	.word	0x2000006c

08000ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efe:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	60d3      	str	r3, [r2, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <__NVIC_GetPriorityGrouping+0x18>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	f003 0307 	and.w	r3, r3, #7
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	db0b      	blt.n	8000f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f003 021f 	and.w	r2, r3, #31
 8000f48:	4907      	ldr	r1, [pc, #28]	; (8000f68 <__NVIC_EnableIRQ+0x38>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	2001      	movs	r0, #1
 8000f52:	fa00 f202 	lsl.w	r2, r0, r2
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000e100 	.word	0xe000e100

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	; (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf28      	it	cs
 8000fde:	2304      	movcs	r3, #4
 8000fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d902      	bls.n	8000ff0 <NVIC_EncodePriority+0x30>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3b03      	subs	r3, #3
 8000fee:	e000      	b.n	8000ff2 <NVIC_EncodePriority+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001008:	f04f 31ff 	mov.w	r1, #4294967295
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43d9      	mvns	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	4313      	orrs	r3, r2
         );
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	; 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001038:	d301      	bcc.n	800103e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103a:	2301      	movs	r3, #1
 800103c:	e00f      	b.n	800105e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <SysTick_Config+0x40>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001046:	210f      	movs	r1, #15
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f7ff ff8e 	bl	8000f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <SysTick_Config+0x40>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <SysTick_Config+0x40>)
 8001058:	2207      	movs	r2, #7
 800105a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	e000e010 	.word	0xe000e010

0800106c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff29 	bl	8000ecc <__NVIC_SetPriorityGrouping>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001094:	f7ff ff3e 	bl	8000f14 <__NVIC_GetPriorityGrouping>
 8001098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	6978      	ldr	r0, [r7, #20]
 80010a0:	f7ff ff8e 	bl	8000fc0 <NVIC_EncodePriority>
 80010a4:	4602      	mov	r2, r0
 80010a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff5d 	bl	8000f6c <__NVIC_SetPriority>
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff31 	bl	8000f30 <__NVIC_EnableIRQ>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffa2 	bl	8001028 <SysTick_Config>
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	; 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
 800110a:	e165      	b.n	80013d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800110c:	2201      	movs	r2, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	429a      	cmp	r2, r3
 8001126:	f040 8154 	bne.w	80013d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	2b01      	cmp	r3, #1
 8001134:	d005      	beq.n	8001142 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113e:	2b02      	cmp	r3, #2
 8001140:	d130      	bne.n	80011a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	2203      	movs	r2, #3
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	68da      	ldr	r2, [r3, #12]
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001178:	2201      	movs	r2, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	091b      	lsrs	r3, r3, #4
 800118e:	f003 0201 	and.w	r2, r3, #1
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d017      	beq.n	80011e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d123      	bne.n	8001234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	08da      	lsrs	r2, r3, #3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3208      	adds	r2, #8
 80011f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	220f      	movs	r2, #15
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	691a      	ldr	r2, [r3, #16]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	08da      	lsrs	r2, r3, #3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3208      	adds	r2, #8
 800122e:	69b9      	ldr	r1, [r7, #24]
 8001230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0203 	and.w	r2, r3, #3
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80ae 	beq.w	80013d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b5d      	ldr	r3, [pc, #372]	; (80013f0 <HAL_GPIO_Init+0x300>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a5c      	ldr	r2, [pc, #368]	; (80013f0 <HAL_GPIO_Init+0x300>)
 8001280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b5a      	ldr	r3, [pc, #360]	; (80013f0 <HAL_GPIO_Init+0x300>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001292:	4a58      	ldr	r2, [pc, #352]	; (80013f4 <HAL_GPIO_Init+0x304>)
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	220f      	movs	r2, #15
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4f      	ldr	r2, [pc, #316]	; (80013f8 <HAL_GPIO_Init+0x308>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d025      	beq.n	800130a <HAL_GPIO_Init+0x21a>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4e      	ldr	r2, [pc, #312]	; (80013fc <HAL_GPIO_Init+0x30c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d01f      	beq.n	8001306 <HAL_GPIO_Init+0x216>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4d      	ldr	r2, [pc, #308]	; (8001400 <HAL_GPIO_Init+0x310>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d019      	beq.n	8001302 <HAL_GPIO_Init+0x212>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4c      	ldr	r2, [pc, #304]	; (8001404 <HAL_GPIO_Init+0x314>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d013      	beq.n	80012fe <HAL_GPIO_Init+0x20e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4b      	ldr	r2, [pc, #300]	; (8001408 <HAL_GPIO_Init+0x318>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d00d      	beq.n	80012fa <HAL_GPIO_Init+0x20a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4a      	ldr	r2, [pc, #296]	; (800140c <HAL_GPIO_Init+0x31c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d007      	beq.n	80012f6 <HAL_GPIO_Init+0x206>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a49      	ldr	r2, [pc, #292]	; (8001410 <HAL_GPIO_Init+0x320>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d101      	bne.n	80012f2 <HAL_GPIO_Init+0x202>
 80012ee:	2306      	movs	r3, #6
 80012f0:	e00c      	b.n	800130c <HAL_GPIO_Init+0x21c>
 80012f2:	2307      	movs	r3, #7
 80012f4:	e00a      	b.n	800130c <HAL_GPIO_Init+0x21c>
 80012f6:	2305      	movs	r3, #5
 80012f8:	e008      	b.n	800130c <HAL_GPIO_Init+0x21c>
 80012fa:	2304      	movs	r3, #4
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x21c>
 80012fe:	2303      	movs	r3, #3
 8001300:	e004      	b.n	800130c <HAL_GPIO_Init+0x21c>
 8001302:	2302      	movs	r3, #2
 8001304:	e002      	b.n	800130c <HAL_GPIO_Init+0x21c>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <HAL_GPIO_Init+0x21c>
 800130a:	2300      	movs	r3, #0
 800130c:	69fa      	ldr	r2, [r7, #28]
 800130e:	f002 0203 	and.w	r2, r2, #3
 8001312:	0092      	lsls	r2, r2, #2
 8001314:	4093      	lsls	r3, r2
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800131c:	4935      	ldr	r1, [pc, #212]	; (80013f4 <HAL_GPIO_Init+0x304>)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	3302      	adds	r3, #2
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132a:	4b3a      	ldr	r3, [pc, #232]	; (8001414 <HAL_GPIO_Init+0x324>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800134e:	4a31      	ldr	r2, [pc, #196]	; (8001414 <HAL_GPIO_Init+0x324>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001354:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <HAL_GPIO_Init+0x324>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001378:	4a26      	ldr	r2, [pc, #152]	; (8001414 <HAL_GPIO_Init+0x324>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800137e:	4b25      	ldr	r3, [pc, #148]	; (8001414 <HAL_GPIO_Init+0x324>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013a2:	4a1c      	ldr	r2, [pc, #112]	; (8001414 <HAL_GPIO_Init+0x324>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <HAL_GPIO_Init+0x324>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013cc:	4a11      	ldr	r2, [pc, #68]	; (8001414 <HAL_GPIO_Init+0x324>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3301      	adds	r3, #1
 80013d6:	61fb      	str	r3, [r7, #28]
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	2b0f      	cmp	r3, #15
 80013dc:	f67f ae96 	bls.w	800110c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3724      	adds	r7, #36	; 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40013800 	.word	0x40013800
 80013f8:	40020000 	.word	0x40020000
 80013fc:	40020400 	.word	0x40020400
 8001400:	40020800 	.word	0x40020800
 8001404:	40020c00 	.word	0x40020c00
 8001408:	40021000 	.word	0x40021000
 800140c:	40021400 	.word	0x40021400
 8001410:	40021800 	.word	0x40021800
 8001414:	40013c00 	.word	0x40013c00

08001418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
 8001424:	4613      	mov	r3, r2
 8001426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001428:	787b      	ldrb	r3, [r7, #1]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001434:	e003      	b.n	800143e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	041a      	lsls	r2, r3, #16
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	619a      	str	r2, [r3, #24]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0cc      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001460:	4b68      	ldr	r3, [pc, #416]	; (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d90c      	bls.n	8001488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146e:	4b65      	ldr	r3, [pc, #404]	; (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001476:	4b63      	ldr	r3, [pc, #396]	; (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0b8      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d020      	beq.n	80014d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a0:	4b59      	ldr	r3, [pc, #356]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a58      	ldr	r2, [pc, #352]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014b8:	4b53      	ldr	r3, [pc, #332]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	4a52      	ldr	r2, [pc, #328]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c4:	4b50      	ldr	r3, [pc, #320]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	494d      	ldr	r1, [pc, #308]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d044      	beq.n	800156c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d107      	bne.n	80014fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	4b47      	ldr	r3, [pc, #284]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d119      	bne.n	800152a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e07f      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d003      	beq.n	800150a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001506:	2b03      	cmp	r3, #3
 8001508:	d107      	bne.n	800151a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150a:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d109      	bne.n	800152a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e06f      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151a:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e067      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152a:	4b37      	ldr	r3, [pc, #220]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f023 0203 	bic.w	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4934      	ldr	r1, [pc, #208]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	4313      	orrs	r3, r2
 800153a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800153c:	f7ff fc96 	bl	8000e6c <HAL_GetTick>
 8001540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	e00a      	b.n	800155a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001544:	f7ff fc92 	bl	8000e6c <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001552:	4293      	cmp	r3, r2
 8001554:	d901      	bls.n	800155a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e04f      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155a:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 020c 	and.w	r2, r3, #12
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	429a      	cmp	r2, r3
 800156a:	d1eb      	bne.n	8001544 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800156c:	4b25      	ldr	r3, [pc, #148]	; (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 030f 	and.w	r3, r3, #15
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d20c      	bcs.n	8001594 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	4b22      	ldr	r3, [pc, #136]	; (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001582:	4b20      	ldr	r3, [pc, #128]	; (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e032      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	4916      	ldr	r1, [pc, #88]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d009      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	490e      	ldr	r1, [pc, #56]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015d2:	f000 f855 	bl	8001680 <HAL_RCC_GetSysClockFreq>
 80015d6:	4602      	mov	r2, r0
 80015d8:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	490a      	ldr	r1, [pc, #40]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 80015e4:	5ccb      	ldrb	r3, [r1, r3]
 80015e6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ea:	4a09      	ldr	r2, [pc, #36]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fbf6 	bl	8000de4 <HAL_InitTick>

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023c00 	.word	0x40023c00
 8001608:	40023800 	.word	0x40023800
 800160c:	08004474 	.word	0x08004474
 8001610:	20000064 	.word	0x20000064
 8001614:	20000068 	.word	0x20000068

08001618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_RCC_GetHCLKFreq+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000064 	.word	0x20000064

08001630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001634:	f7ff fff0 	bl	8001618 <HAL_RCC_GetHCLKFreq>
 8001638:	4602      	mov	r2, r0
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	0a9b      	lsrs	r3, r3, #10
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	4903      	ldr	r1, [pc, #12]	; (8001654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001646:	5ccb      	ldrb	r3, [r1, r3]
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800164c:	4618      	mov	r0, r3
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40023800 	.word	0x40023800
 8001654:	08004484 	.word	0x08004484

08001658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800165c:	f7ff ffdc 	bl	8001618 <HAL_RCC_GetHCLKFreq>
 8001660:	4602      	mov	r2, r0
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	0b5b      	lsrs	r3, r3, #13
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	4903      	ldr	r1, [pc, #12]	; (800167c <HAL_RCC_GetPCLK2Freq+0x24>)
 800166e:	5ccb      	ldrb	r3, [r1, r3]
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001674:	4618      	mov	r0, r3
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40023800 	.word	0x40023800
 800167c:	08004484 	.word	0x08004484

08001680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001684:	b0a6      	sub	sp, #152	; 0x98
 8001686:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016a6:	4bc8      	ldr	r3, [pc, #800]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b0c      	cmp	r3, #12
 80016b0:	f200 817e 	bhi.w	80019b0 <HAL_RCC_GetSysClockFreq+0x330>
 80016b4:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80016b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ba:	bf00      	nop
 80016bc:	080016f1 	.word	0x080016f1
 80016c0:	080019b1 	.word	0x080019b1
 80016c4:	080019b1 	.word	0x080019b1
 80016c8:	080019b1 	.word	0x080019b1
 80016cc:	080016f9 	.word	0x080016f9
 80016d0:	080019b1 	.word	0x080019b1
 80016d4:	080019b1 	.word	0x080019b1
 80016d8:	080019b1 	.word	0x080019b1
 80016dc:	08001701 	.word	0x08001701
 80016e0:	080019b1 	.word	0x080019b1
 80016e4:	080019b1 	.word	0x080019b1
 80016e8:	080019b1 	.word	0x080019b1
 80016ec:	0800186b 	.word	0x0800186b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016f0:	4bb6      	ldr	r3, [pc, #728]	; (80019cc <HAL_RCC_GetSysClockFreq+0x34c>)
 80016f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80016f6:	e15f      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016f8:	4bb5      	ldr	r3, [pc, #724]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x350>)
 80016fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80016fe:	e15b      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001700:	4bb1      	ldr	r3, [pc, #708]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001708:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800170c:	4bae      	ldr	r3, [pc, #696]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d031      	beq.n	800177c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001718:	4bab      	ldr	r3, [pc, #684]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	099b      	lsrs	r3, r3, #6
 800171e:	2200      	movs	r2, #0
 8001720:	66bb      	str	r3, [r7, #104]	; 0x68
 8001722:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001724:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800172a:	663b      	str	r3, [r7, #96]	; 0x60
 800172c:	2300      	movs	r3, #0
 800172e:	667b      	str	r3, [r7, #100]	; 0x64
 8001730:	4ba7      	ldr	r3, [pc, #668]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001732:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001736:	462a      	mov	r2, r5
 8001738:	fb03 f202 	mul.w	r2, r3, r2
 800173c:	2300      	movs	r3, #0
 800173e:	4621      	mov	r1, r4
 8001740:	fb01 f303 	mul.w	r3, r1, r3
 8001744:	4413      	add	r3, r2
 8001746:	4aa2      	ldr	r2, [pc, #648]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001748:	4621      	mov	r1, r4
 800174a:	fba1 1202 	umull	r1, r2, r1, r2
 800174e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001750:	460a      	mov	r2, r1
 8001752:	67ba      	str	r2, [r7, #120]	; 0x78
 8001754:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001756:	4413      	add	r3, r2
 8001758:	67fb      	str	r3, [r7, #124]	; 0x7c
 800175a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800175e:	2200      	movs	r2, #0
 8001760:	65bb      	str	r3, [r7, #88]	; 0x58
 8001762:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001764:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001768:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800176c:	f7fe fd52 	bl	8000214 <__aeabi_uldivmod>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4613      	mov	r3, r2
 8001776:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800177a:	e064      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177c:	4b92      	ldr	r3, [pc, #584]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	2200      	movs	r2, #0
 8001784:	653b      	str	r3, [r7, #80]	; 0x50
 8001786:	657a      	str	r2, [r7, #84]	; 0x54
 8001788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800178a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800178e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001790:	2300      	movs	r3, #0
 8001792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001794:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001798:	4622      	mov	r2, r4
 800179a:	462b      	mov	r3, r5
 800179c:	f04f 0000 	mov.w	r0, #0
 80017a0:	f04f 0100 	mov.w	r1, #0
 80017a4:	0159      	lsls	r1, r3, #5
 80017a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017aa:	0150      	lsls	r0, r2, #5
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4621      	mov	r1, r4
 80017b2:	1a51      	subs	r1, r2, r1
 80017b4:	6139      	str	r1, [r7, #16]
 80017b6:	4629      	mov	r1, r5
 80017b8:	eb63 0301 	sbc.w	r3, r3, r1
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017ca:	4659      	mov	r1, fp
 80017cc:	018b      	lsls	r3, r1, #6
 80017ce:	4651      	mov	r1, sl
 80017d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017d4:	4651      	mov	r1, sl
 80017d6:	018a      	lsls	r2, r1, #6
 80017d8:	4651      	mov	r1, sl
 80017da:	ebb2 0801 	subs.w	r8, r2, r1
 80017de:	4659      	mov	r1, fp
 80017e0:	eb63 0901 	sbc.w	r9, r3, r1
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017f8:	4690      	mov	r8, r2
 80017fa:	4699      	mov	r9, r3
 80017fc:	4623      	mov	r3, r4
 80017fe:	eb18 0303 	adds.w	r3, r8, r3
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	462b      	mov	r3, r5
 8001806:	eb49 0303 	adc.w	r3, r9, r3
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001818:	4629      	mov	r1, r5
 800181a:	028b      	lsls	r3, r1, #10
 800181c:	4621      	mov	r1, r4
 800181e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001822:	4621      	mov	r1, r4
 8001824:	028a      	lsls	r2, r1, #10
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800182e:	2200      	movs	r2, #0
 8001830:	643b      	str	r3, [r7, #64]	; 0x40
 8001832:	647a      	str	r2, [r7, #68]	; 0x44
 8001834:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001838:	f7fe fcec 	bl	8000214 <__aeabi_uldivmod>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4613      	mov	r3, r2
 8001842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001846:	4b60      	ldr	r3, [pc, #384]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	0c1b      	lsrs	r3, r3, #16
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	3301      	adds	r3, #1
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001858:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800185c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001860:	fbb2 f3f3 	udiv	r3, r2, r3
 8001864:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001868:	e0a6      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800186a:	4b57      	ldr	r3, [pc, #348]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001876:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d02a      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001882:	4b51      	ldr	r3, [pc, #324]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	099b      	lsrs	r3, r3, #6
 8001888:	2200      	movs	r2, #0
 800188a:	63bb      	str	r3, [r7, #56]	; 0x38
 800188c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800188e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001890:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001894:	2100      	movs	r1, #0
 8001896:	4b4e      	ldr	r3, [pc, #312]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001898:	fb03 f201 	mul.w	r2, r3, r1
 800189c:	2300      	movs	r3, #0
 800189e:	fb00 f303 	mul.w	r3, r0, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	4a4a      	ldr	r2, [pc, #296]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x350>)
 80018a6:	fba0 1202 	umull	r1, r2, r0, r2
 80018aa:	677a      	str	r2, [r7, #116]	; 0x74
 80018ac:	460a      	mov	r2, r1
 80018ae:	673a      	str	r2, [r7, #112]	; 0x70
 80018b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80018b2:	4413      	add	r3, r2
 80018b4:	677b      	str	r3, [r7, #116]	; 0x74
 80018b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018ba:	2200      	movs	r2, #0
 80018bc:	633b      	str	r3, [r7, #48]	; 0x30
 80018be:	637a      	str	r2, [r7, #52]	; 0x34
 80018c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80018c4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80018c8:	f7fe fca4 	bl	8000214 <__aeabi_uldivmod>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4613      	mov	r3, r2
 80018d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80018d6:	e05b      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d8:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	099b      	lsrs	r3, r3, #6
 80018de:	2200      	movs	r2, #0
 80018e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80018e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ea:	623b      	str	r3, [r7, #32]
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
 80018f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018f4:	4642      	mov	r2, r8
 80018f6:	464b      	mov	r3, r9
 80018f8:	f04f 0000 	mov.w	r0, #0
 80018fc:	f04f 0100 	mov.w	r1, #0
 8001900:	0159      	lsls	r1, r3, #5
 8001902:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001906:	0150      	lsls	r0, r2, #5
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4641      	mov	r1, r8
 800190e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001912:	4649      	mov	r1, r9
 8001914:	eb63 0b01 	sbc.w	fp, r3, r1
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001924:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001928:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800192c:	ebb2 040a 	subs.w	r4, r2, sl
 8001930:	eb63 050b 	sbc.w	r5, r3, fp
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	00eb      	lsls	r3, r5, #3
 800193e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001942:	00e2      	lsls	r2, r4, #3
 8001944:	4614      	mov	r4, r2
 8001946:	461d      	mov	r5, r3
 8001948:	4643      	mov	r3, r8
 800194a:	18e3      	adds	r3, r4, r3
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	464b      	mov	r3, r9
 8001950:	eb45 0303 	adc.w	r3, r5, r3
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001962:	4629      	mov	r1, r5
 8001964:	028b      	lsls	r3, r1, #10
 8001966:	4621      	mov	r1, r4
 8001968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800196c:	4621      	mov	r1, r4
 800196e:	028a      	lsls	r2, r1, #10
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001978:	2200      	movs	r2, #0
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	61fa      	str	r2, [r7, #28]
 800197e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001982:	f7fe fc47 	bl	8000214 <__aeabi_uldivmod>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4613      	mov	r3, r2
 800198c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	0f1b      	lsrs	r3, r3, #28
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800199e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80019a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80019ae:	e003      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_RCC_GetSysClockFreq+0x34c>)
 80019b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80019b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3798      	adds	r7, #152	; 0x98
 80019c0:	46bd      	mov	sp, r7
 80019c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	00f42400 	.word	0x00f42400
 80019d0:	017d7840 	.word	0x017d7840

080019d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e28d      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8083 	beq.w	8001afa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019f4:	4b94      	ldr	r3, [pc, #592]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d019      	beq.n	8001a34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a00:	4b91      	ldr	r3, [pc, #580]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a0c:	4b8e      	ldr	r3, [pc, #568]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a18:	d00c      	beq.n	8001a34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a1a:	4b8b      	ldr	r3, [pc, #556]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d112      	bne.n	8001a4c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a26:	4b88      	ldr	r3, [pc, #544]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a32:	d10b      	bne.n	8001a4c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	4b84      	ldr	r3, [pc, #528]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d05b      	beq.n	8001af8 <HAL_RCC_OscConfig+0x124>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d157      	bne.n	8001af8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e25a      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a54:	d106      	bne.n	8001a64 <HAL_RCC_OscConfig+0x90>
 8001a56:	4b7c      	ldr	r3, [pc, #496]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a7b      	ldr	r2, [pc, #492]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e01d      	b.n	8001aa0 <HAL_RCC_OscConfig+0xcc>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0xb4>
 8001a6e:	4b76      	ldr	r3, [pc, #472]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a75      	ldr	r2, [pc, #468]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b73      	ldr	r3, [pc, #460]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a72      	ldr	r2, [pc, #456]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e00b      	b.n	8001aa0 <HAL_RCC_OscConfig+0xcc>
 8001a88:	4b6f      	ldr	r3, [pc, #444]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a6e      	ldr	r2, [pc, #440]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4b6c      	ldr	r3, [pc, #432]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a6b      	ldr	r2, [pc, #428]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d013      	beq.n	8001ad0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff f9e0 	bl	8000e6c <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7ff f9dc 	bl	8000e6c <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	; 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e21f      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	4b61      	ldr	r3, [pc, #388]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0xdc>
 8001ace:	e014      	b.n	8001afa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f9cc 	bl	8000e6c <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7ff f9c8 	bl	8000e6c <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	; 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e20b      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	4b57      	ldr	r3, [pc, #348]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x104>
 8001af6:	e000      	b.n	8001afa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d06f      	beq.n	8001be6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b06:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d017      	beq.n	8001b42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b12:	4b4d      	ldr	r3, [pc, #308]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d105      	bne.n	8001b2a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b1e:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00b      	beq.n	8001b42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2a:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b32:	2b0c      	cmp	r3, #12
 8001b34:	d11c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b36:	4b44      	ldr	r3, [pc, #272]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d116      	bne.n	8001b70 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	4b41      	ldr	r3, [pc, #260]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <HAL_RCC_OscConfig+0x186>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e1d3      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4937      	ldr	r1, [pc, #220]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6e:	e03a      	b.n	8001be6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b78:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_RCC_OscConfig+0x278>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7ff f975 	bl	8000e6c <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b86:	f7ff f971 	bl	8000e6c <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e1b4      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b98:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba4:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4925      	ldr	r1, [pc, #148]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]
 8001bb8:	e015      	b.n	8001be6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_RCC_OscConfig+0x278>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f954 	bl	8000e6c <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc8:	f7ff f950 	bl	8000e6c <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e193      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d036      	beq.n	8001c60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d016      	beq.n	8001c28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_RCC_OscConfig+0x27c>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7ff f934 	bl	8000e6c <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff f930 	bl	8000e6c <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e173      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x234>
 8001c26:	e01b      	b.n	8001c60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_RCC_OscConfig+0x27c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f91d 	bl	8000e6c <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c34:	e00e      	b.n	8001c54 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c36:	f7ff f919 	bl	8000e6c <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d907      	bls.n	8001c54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e15c      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	42470000 	.word	0x42470000
 8001c50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c54:	4b8a      	ldr	r3, [pc, #552]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ea      	bne.n	8001c36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 8097 	beq.w	8001d9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c72:	4b83      	ldr	r3, [pc, #524]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10f      	bne.n	8001c9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b7f      	ldr	r3, [pc, #508]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a7e      	ldr	r2, [pc, #504]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b7c      	ldr	r3, [pc, #496]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9e:	4b79      	ldr	r3, [pc, #484]	; (8001e84 <HAL_RCC_OscConfig+0x4b0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001caa:	4b76      	ldr	r3, [pc, #472]	; (8001e84 <HAL_RCC_OscConfig+0x4b0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a75      	ldr	r2, [pc, #468]	; (8001e84 <HAL_RCC_OscConfig+0x4b0>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff f8d9 	bl	8000e6c <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbe:	f7ff f8d5 	bl	8000e6c <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e118      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b6c      	ldr	r3, [pc, #432]	; (8001e84 <HAL_RCC_OscConfig+0x4b0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x31e>
 8001ce4:	4b66      	ldr	r3, [pc, #408]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	4a65      	ldr	r2, [pc, #404]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf0:	e01c      	b.n	8001d2c <HAL_RCC_OscConfig+0x358>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b05      	cmp	r3, #5
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x340>
 8001cfa:	4b61      	ldr	r3, [pc, #388]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	4a60      	ldr	r2, [pc, #384]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	6713      	str	r3, [r2, #112]	; 0x70
 8001d06:	4b5e      	ldr	r3, [pc, #376]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	4a5d      	ldr	r2, [pc, #372]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6713      	str	r3, [r2, #112]	; 0x70
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0x358>
 8001d14:	4b5a      	ldr	r3, [pc, #360]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	4a59      	ldr	r2, [pc, #356]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d20:	4b57      	ldr	r3, [pc, #348]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	4a56      	ldr	r2, [pc, #344]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d26:	f023 0304 	bic.w	r3, r3, #4
 8001d2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d015      	beq.n	8001d60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff f89a 	bl	8000e6c <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f896 	bl	8000e6c <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e0d7      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d52:	4b4b      	ldr	r3, [pc, #300]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0ee      	beq.n	8001d3c <HAL_RCC_OscConfig+0x368>
 8001d5e:	e014      	b.n	8001d8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7ff f884 	bl	8000e6c <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d68:	f7ff f880 	bl	8000e6c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e0c1      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7e:	4b40      	ldr	r3, [pc, #256]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1ee      	bne.n	8001d68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d90:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	4a3a      	ldr	r2, [pc, #232]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80ad 	beq.w	8001f00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001da6:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d060      	beq.n	8001e74 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d145      	bne.n	8001e46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <HAL_RCC_OscConfig+0x4b4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f854 	bl	8000e6c <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7ff f850 	bl	8000e6c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e093      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dda:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	019b      	lsls	r3, r3, #6
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	085b      	lsrs	r3, r3, #1
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	041b      	lsls	r3, r3, #16
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	061b      	lsls	r3, r3, #24
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e10:	071b      	lsls	r3, r3, #28
 8001e12:	491b      	ldr	r1, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_RCC_OscConfig+0x4b4>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1e:	f7ff f825 	bl	8000e6c <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e26:	f7ff f821 	bl	8000e6c <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e064      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x452>
 8001e44:	e05c      	b.n	8001f00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <HAL_RCC_OscConfig+0x4b4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7ff f80e 	bl	8000e6c <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e54:	f7ff f80a 	bl	8000e6c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e04d      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x480>
 8001e72:	e045      	b.n	8001f00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e040      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40007000 	.word	0x40007000
 8001e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <HAL_RCC_OscConfig+0x538>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d030      	beq.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d129      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d122      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d119      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d10f      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800

08001f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e041      	b.n	8001fa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fe1a 	bl	8000b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	f000 fc70 	bl	8002834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d001      	beq.n	8001fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e04e      	b.n	8002066 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a23      	ldr	r2, [pc, #140]	; (8002074 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d022      	beq.n	8002030 <HAL_TIM_Base_Start_IT+0x80>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff2:	d01d      	beq.n	8002030 <HAL_TIM_Base_Start_IT+0x80>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1f      	ldr	r2, [pc, #124]	; (8002078 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d018      	beq.n	8002030 <HAL_TIM_Base_Start_IT+0x80>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a1e      	ldr	r2, [pc, #120]	; (800207c <HAL_TIM_Base_Start_IT+0xcc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d013      	beq.n	8002030 <HAL_TIM_Base_Start_IT+0x80>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a1c      	ldr	r2, [pc, #112]	; (8002080 <HAL_TIM_Base_Start_IT+0xd0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00e      	beq.n	8002030 <HAL_TIM_Base_Start_IT+0x80>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1b      	ldr	r2, [pc, #108]	; (8002084 <HAL_TIM_Base_Start_IT+0xd4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d009      	beq.n	8002030 <HAL_TIM_Base_Start_IT+0x80>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a19      	ldr	r2, [pc, #100]	; (8002088 <HAL_TIM_Base_Start_IT+0xd8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d004      	beq.n	8002030 <HAL_TIM_Base_Start_IT+0x80>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a18      	ldr	r2, [pc, #96]	; (800208c <HAL_TIM_Base_Start_IT+0xdc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d111      	bne.n	8002054 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b06      	cmp	r3, #6
 8002040:	d010      	beq.n	8002064 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0201 	orr.w	r2, r2, #1
 8002050:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002052:	e007      	b.n	8002064 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0201 	orr.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40010000 	.word	0x40010000
 8002078:	40000400 	.word	0x40000400
 800207c:	40000800 	.word	0x40000800
 8002080:	40000c00 	.word	0x40000c00
 8002084:	40010400 	.word	0x40010400
 8002088:	40014000 	.word	0x40014000
 800208c:	40001800 	.word	0x40001800

08002090 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e041      	b.n	8002126 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe fd3a 	bl	8000b30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3304      	adds	r3, #4
 80020cc:	4619      	mov	r1, r3
 80020ce:	4610      	mov	r0, r2
 80020d0:	f000 fbb0 	bl	8002834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d109      	bne.n	8002154 <HAL_TIM_PWM_Start+0x24>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b01      	cmp	r3, #1
 800214a:	bf14      	ite	ne
 800214c:	2301      	movne	r3, #1
 800214e:	2300      	moveq	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	e022      	b.n	800219a <HAL_TIM_PWM_Start+0x6a>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b04      	cmp	r3, #4
 8002158:	d109      	bne.n	800216e <HAL_TIM_PWM_Start+0x3e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	bf14      	ite	ne
 8002166:	2301      	movne	r3, #1
 8002168:	2300      	moveq	r3, #0
 800216a:	b2db      	uxtb	r3, r3
 800216c:	e015      	b.n	800219a <HAL_TIM_PWM_Start+0x6a>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b08      	cmp	r3, #8
 8002172:	d109      	bne.n	8002188 <HAL_TIM_PWM_Start+0x58>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b01      	cmp	r3, #1
 800217e:	bf14      	ite	ne
 8002180:	2301      	movne	r3, #1
 8002182:	2300      	moveq	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	e008      	b.n	800219a <HAL_TIM_PWM_Start+0x6a>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b01      	cmp	r3, #1
 8002192:	bf14      	ite	ne
 8002194:	2301      	movne	r3, #1
 8002196:	2300      	moveq	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07c      	b.n	800229c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d104      	bne.n	80021b2 <HAL_TIM_PWM_Start+0x82>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021b0:	e013      	b.n	80021da <HAL_TIM_PWM_Start+0xaa>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d104      	bne.n	80021c2 <HAL_TIM_PWM_Start+0x92>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021c0:	e00b      	b.n	80021da <HAL_TIM_PWM_Start+0xaa>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d104      	bne.n	80021d2 <HAL_TIM_PWM_Start+0xa2>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021d0:	e003      	b.n	80021da <HAL_TIM_PWM_Start+0xaa>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2201      	movs	r2, #1
 80021e0:	6839      	ldr	r1, [r7, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fe10 	bl	8002e08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a2d      	ldr	r2, [pc, #180]	; (80022a4 <HAL_TIM_PWM_Start+0x174>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d004      	beq.n	80021fc <HAL_TIM_PWM_Start+0xcc>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a2c      	ldr	r2, [pc, #176]	; (80022a8 <HAL_TIM_PWM_Start+0x178>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d101      	bne.n	8002200 <HAL_TIM_PWM_Start+0xd0>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_TIM_PWM_Start+0xd2>
 8002200:	2300      	movs	r3, #0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d007      	beq.n	8002216 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002214:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a22      	ldr	r2, [pc, #136]	; (80022a4 <HAL_TIM_PWM_Start+0x174>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d022      	beq.n	8002266 <HAL_TIM_PWM_Start+0x136>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002228:	d01d      	beq.n	8002266 <HAL_TIM_PWM_Start+0x136>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1f      	ldr	r2, [pc, #124]	; (80022ac <HAL_TIM_PWM_Start+0x17c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d018      	beq.n	8002266 <HAL_TIM_PWM_Start+0x136>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1d      	ldr	r2, [pc, #116]	; (80022b0 <HAL_TIM_PWM_Start+0x180>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_TIM_PWM_Start+0x136>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <HAL_TIM_PWM_Start+0x184>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00e      	beq.n	8002266 <HAL_TIM_PWM_Start+0x136>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a16      	ldr	r2, [pc, #88]	; (80022a8 <HAL_TIM_PWM_Start+0x178>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d009      	beq.n	8002266 <HAL_TIM_PWM_Start+0x136>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a18      	ldr	r2, [pc, #96]	; (80022b8 <HAL_TIM_PWM_Start+0x188>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d004      	beq.n	8002266 <HAL_TIM_PWM_Start+0x136>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a16      	ldr	r2, [pc, #88]	; (80022bc <HAL_TIM_PWM_Start+0x18c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d111      	bne.n	800228a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b06      	cmp	r3, #6
 8002276:	d010      	beq.n	800229a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002288:	e007      	b.n	800229a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0201 	orr.w	r2, r2, #1
 8002298:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40010000 	.word	0x40010000
 80022a8:	40010400 	.word	0x40010400
 80022ac:	40000400 	.word	0x40000400
 80022b0:	40000800 	.word	0x40000800
 80022b4:	40000c00 	.word	0x40000c00
 80022b8:	40014000 	.word	0x40014000
 80022bc:	40001800 	.word	0x40001800

080022c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d122      	bne.n	800231c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d11b      	bne.n	800231c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0202 	mvn.w	r2, #2
 80022ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fa77 	bl	80027f6 <HAL_TIM_IC_CaptureCallback>
 8002308:	e005      	b.n	8002316 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 fa69 	bl	80027e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 fa7a 	bl	800280a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	2b04      	cmp	r3, #4
 8002328:	d122      	bne.n	8002370 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b04      	cmp	r3, #4
 8002336:	d11b      	bne.n	8002370 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0204 	mvn.w	r2, #4
 8002340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2202      	movs	r2, #2
 8002346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fa4d 	bl	80027f6 <HAL_TIM_IC_CaptureCallback>
 800235c:	e005      	b.n	800236a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fa3f 	bl	80027e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fa50 	bl	800280a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b08      	cmp	r3, #8
 800237c:	d122      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b08      	cmp	r3, #8
 800238a:	d11b      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0208 	mvn.w	r2, #8
 8002394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2204      	movs	r2, #4
 800239a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fa23 	bl	80027f6 <HAL_TIM_IC_CaptureCallback>
 80023b0:	e005      	b.n	80023be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fa15 	bl	80027e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 fa26 	bl	800280a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b10      	cmp	r3, #16
 80023d0:	d122      	bne.n	8002418 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0310 	and.w	r3, r3, #16
 80023dc:	2b10      	cmp	r3, #16
 80023de:	d11b      	bne.n	8002418 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0210 	mvn.w	r2, #16
 80023e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2208      	movs	r2, #8
 80023ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f9f9 	bl	80027f6 <HAL_TIM_IC_CaptureCallback>
 8002404:	e005      	b.n	8002412 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f9eb 	bl	80027e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f9fc 	bl	800280a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b01      	cmp	r3, #1
 8002424:	d10e      	bne.n	8002444 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b01      	cmp	r3, #1
 8002432:	d107      	bne.n	8002444 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0201 	mvn.w	r2, #1
 800243c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7fe f86a 	bl	8000518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244e:	2b80      	cmp	r3, #128	; 0x80
 8002450:	d10e      	bne.n	8002470 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245c:	2b80      	cmp	r3, #128	; 0x80
 800245e:	d107      	bne.n	8002470 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fd78 	bl	8002f60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247a:	2b40      	cmp	r3, #64	; 0x40
 800247c:	d10e      	bne.n	800249c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002488:	2b40      	cmp	r3, #64	; 0x40
 800248a:	d107      	bne.n	800249c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f9c1 	bl	800281e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0320 	and.w	r3, r3, #32
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	d10e      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d107      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0220 	mvn.w	r2, #32
 80024c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 fd42 	bl	8002f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e0ae      	b.n	800264c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b0c      	cmp	r3, #12
 80024fa:	f200 809f 	bhi.w	800263c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80024fe:	a201      	add	r2, pc, #4	; (adr r2, 8002504 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002504:	08002539 	.word	0x08002539
 8002508:	0800263d 	.word	0x0800263d
 800250c:	0800263d 	.word	0x0800263d
 8002510:	0800263d 	.word	0x0800263d
 8002514:	08002579 	.word	0x08002579
 8002518:	0800263d 	.word	0x0800263d
 800251c:	0800263d 	.word	0x0800263d
 8002520:	0800263d 	.word	0x0800263d
 8002524:	080025bb 	.word	0x080025bb
 8002528:	0800263d 	.word	0x0800263d
 800252c:	0800263d 	.word	0x0800263d
 8002530:	0800263d 	.word	0x0800263d
 8002534:	080025fb 	.word	0x080025fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	4618      	mov	r0, r3
 8002540:	f000 fa18 	bl	8002974 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699a      	ldr	r2, [r3, #24]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0208 	orr.w	r2, r2, #8
 8002552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699a      	ldr	r2, [r3, #24]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0204 	bic.w	r2, r2, #4
 8002562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6999      	ldr	r1, [r3, #24]
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	619a      	str	r2, [r3, #24]
      break;
 8002576:	e064      	b.n	8002642 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fa68 	bl	8002a54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699a      	ldr	r2, [r3, #24]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6999      	ldr	r1, [r3, #24]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	021a      	lsls	r2, r3, #8
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	619a      	str	r2, [r3, #24]
      break;
 80025b8:	e043      	b.n	8002642 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68b9      	ldr	r1, [r7, #8]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 fabd 	bl	8002b40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	69da      	ldr	r2, [r3, #28]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0208 	orr.w	r2, r2, #8
 80025d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	69da      	ldr	r2, [r3, #28]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0204 	bic.w	r2, r2, #4
 80025e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	69d9      	ldr	r1, [r3, #28]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	61da      	str	r2, [r3, #28]
      break;
 80025f8:	e023      	b.n	8002642 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	4618      	mov	r0, r3
 8002602:	f000 fb11 	bl	8002c28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69da      	ldr	r2, [r3, #28]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69da      	ldr	r2, [r3, #28]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69d9      	ldr	r1, [r3, #28]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	021a      	lsls	r2, r3, #8
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	61da      	str	r2, [r3, #28]
      break;
 800263a:	e002      	b.n	8002642 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	75fb      	strb	r3, [r7, #23]
      break;
 8002640:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800264a:	7dfb      	ldrb	r3, [r7, #23]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_TIM_ConfigClockSource+0x1c>
 800266c:	2302      	movs	r3, #2
 800266e:	e0b4      	b.n	80027da <HAL_TIM_ConfigClockSource+0x186>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800268e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002696:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a8:	d03e      	beq.n	8002728 <HAL_TIM_ConfigClockSource+0xd4>
 80026aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ae:	f200 8087 	bhi.w	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b6:	f000 8086 	beq.w	80027c6 <HAL_TIM_ConfigClockSource+0x172>
 80026ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026be:	d87f      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026c0:	2b70      	cmp	r3, #112	; 0x70
 80026c2:	d01a      	beq.n	80026fa <HAL_TIM_ConfigClockSource+0xa6>
 80026c4:	2b70      	cmp	r3, #112	; 0x70
 80026c6:	d87b      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026c8:	2b60      	cmp	r3, #96	; 0x60
 80026ca:	d050      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x11a>
 80026cc:	2b60      	cmp	r3, #96	; 0x60
 80026ce:	d877      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026d0:	2b50      	cmp	r3, #80	; 0x50
 80026d2:	d03c      	beq.n	800274e <HAL_TIM_ConfigClockSource+0xfa>
 80026d4:	2b50      	cmp	r3, #80	; 0x50
 80026d6:	d873      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026d8:	2b40      	cmp	r3, #64	; 0x40
 80026da:	d058      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x13a>
 80026dc:	2b40      	cmp	r3, #64	; 0x40
 80026de:	d86f      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026e0:	2b30      	cmp	r3, #48	; 0x30
 80026e2:	d064      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x15a>
 80026e4:	2b30      	cmp	r3, #48	; 0x30
 80026e6:	d86b      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	d060      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x15a>
 80026ec:	2b20      	cmp	r3, #32
 80026ee:	d867      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d05c      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x15a>
 80026f4:	2b10      	cmp	r3, #16
 80026f6:	d05a      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x15a>
 80026f8:	e062      	b.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6899      	ldr	r1, [r3, #8]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f000 fb5d 	bl	8002dc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800271c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	609a      	str	r2, [r3, #8]
      break;
 8002726:	e04f      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	6899      	ldr	r1, [r3, #8]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f000 fb46 	bl	8002dc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800274a:	609a      	str	r2, [r3, #8]
      break;
 800274c:	e03c      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	461a      	mov	r2, r3
 800275c:	f000 faba 	bl	8002cd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2150      	movs	r1, #80	; 0x50
 8002766:	4618      	mov	r0, r3
 8002768:	f000 fb13 	bl	8002d92 <TIM_ITRx_SetConfig>
      break;
 800276c:	e02c      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6859      	ldr	r1, [r3, #4]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	461a      	mov	r2, r3
 800277c:	f000 fad9 	bl	8002d32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2160      	movs	r1, #96	; 0x60
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fb03 	bl	8002d92 <TIM_ITRx_SetConfig>
      break;
 800278c:	e01c      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6859      	ldr	r1, [r3, #4]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	461a      	mov	r2, r3
 800279c:	f000 fa9a 	bl	8002cd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2140      	movs	r1, #64	; 0x40
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 faf3 	bl	8002d92 <TIM_ITRx_SetConfig>
      break;
 80027ac:	e00c      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4619      	mov	r1, r3
 80027b8:	4610      	mov	r0, r2
 80027ba:	f000 faea 	bl	8002d92 <TIM_ITRx_SetConfig>
      break;
 80027be:	e003      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      break;
 80027c4:	e000      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a40      	ldr	r2, [pc, #256]	; (8002948 <TIM_Base_SetConfig+0x114>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d013      	beq.n	8002874 <TIM_Base_SetConfig+0x40>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002852:	d00f      	beq.n	8002874 <TIM_Base_SetConfig+0x40>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a3d      	ldr	r2, [pc, #244]	; (800294c <TIM_Base_SetConfig+0x118>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d00b      	beq.n	8002874 <TIM_Base_SetConfig+0x40>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a3c      	ldr	r2, [pc, #240]	; (8002950 <TIM_Base_SetConfig+0x11c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d007      	beq.n	8002874 <TIM_Base_SetConfig+0x40>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a3b      	ldr	r2, [pc, #236]	; (8002954 <TIM_Base_SetConfig+0x120>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d003      	beq.n	8002874 <TIM_Base_SetConfig+0x40>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a3a      	ldr	r2, [pc, #232]	; (8002958 <TIM_Base_SetConfig+0x124>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d108      	bne.n	8002886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a2f      	ldr	r2, [pc, #188]	; (8002948 <TIM_Base_SetConfig+0x114>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d02b      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002894:	d027      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a2c      	ldr	r2, [pc, #176]	; (800294c <TIM_Base_SetConfig+0x118>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d023      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a2b      	ldr	r2, [pc, #172]	; (8002950 <TIM_Base_SetConfig+0x11c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d01f      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a2a      	ldr	r2, [pc, #168]	; (8002954 <TIM_Base_SetConfig+0x120>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d01b      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a29      	ldr	r2, [pc, #164]	; (8002958 <TIM_Base_SetConfig+0x124>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d017      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a28      	ldr	r2, [pc, #160]	; (800295c <TIM_Base_SetConfig+0x128>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d013      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a27      	ldr	r2, [pc, #156]	; (8002960 <TIM_Base_SetConfig+0x12c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00f      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a26      	ldr	r2, [pc, #152]	; (8002964 <TIM_Base_SetConfig+0x130>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00b      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a25      	ldr	r2, [pc, #148]	; (8002968 <TIM_Base_SetConfig+0x134>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d007      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a24      	ldr	r2, [pc, #144]	; (800296c <TIM_Base_SetConfig+0x138>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d003      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a23      	ldr	r2, [pc, #140]	; (8002970 <TIM_Base_SetConfig+0x13c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d108      	bne.n	80028f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <TIM_Base_SetConfig+0x114>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d003      	beq.n	800292c <TIM_Base_SetConfig+0xf8>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a0c      	ldr	r2, [pc, #48]	; (8002958 <TIM_Base_SetConfig+0x124>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d103      	bne.n	8002934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	615a      	str	r2, [r3, #20]
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40010000 	.word	0x40010000
 800294c:	40000400 	.word	0x40000400
 8002950:	40000800 	.word	0x40000800
 8002954:	40000c00 	.word	0x40000c00
 8002958:	40010400 	.word	0x40010400
 800295c:	40014000 	.word	0x40014000
 8002960:	40014400 	.word	0x40014400
 8002964:	40014800 	.word	0x40014800
 8002968:	40001800 	.word	0x40001800
 800296c:	40001c00 	.word	0x40001c00
 8002970:	40002000 	.word	0x40002000

08002974 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	f023 0201 	bic.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0303 	bic.w	r3, r3, #3
 80029aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f023 0302 	bic.w	r3, r3, #2
 80029bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a20      	ldr	r2, [pc, #128]	; (8002a4c <TIM_OC1_SetConfig+0xd8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d003      	beq.n	80029d8 <TIM_OC1_SetConfig+0x64>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a1f      	ldr	r2, [pc, #124]	; (8002a50 <TIM_OC1_SetConfig+0xdc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d10c      	bne.n	80029f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f023 0308 	bic.w	r3, r3, #8
 80029de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f023 0304 	bic.w	r3, r3, #4
 80029f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <TIM_OC1_SetConfig+0xd8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d003      	beq.n	8002a02 <TIM_OC1_SetConfig+0x8e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a14      	ldr	r2, [pc, #80]	; (8002a50 <TIM_OC1_SetConfig+0xdc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d111      	bne.n	8002a26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	621a      	str	r2, [r3, #32]
}
 8002a40:	bf00      	nop
 8002a42:	371c      	adds	r7, #28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40010000 	.word	0x40010000
 8002a50:	40010400 	.word	0x40010400

08002a54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	f023 0210 	bic.w	r2, r3, #16
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f023 0320 	bic.w	r3, r3, #32
 8002a9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <TIM_OC2_SetConfig+0xe4>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d003      	beq.n	8002abc <TIM_OC2_SetConfig+0x68>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a21      	ldr	r2, [pc, #132]	; (8002b3c <TIM_OC2_SetConfig+0xe8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d10d      	bne.n	8002ad8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ad6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <TIM_OC2_SetConfig+0xe4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d003      	beq.n	8002ae8 <TIM_OC2_SetConfig+0x94>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a16      	ldr	r2, [pc, #88]	; (8002b3c <TIM_OC2_SetConfig+0xe8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d113      	bne.n	8002b10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002af6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	621a      	str	r2, [r3, #32]
}
 8002b2a:	bf00      	nop
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40010000 	.word	0x40010000
 8002b3c:	40010400 	.word	0x40010400

08002b40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f023 0303 	bic.w	r3, r3, #3
 8002b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	021b      	lsls	r3, r3, #8
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a21      	ldr	r2, [pc, #132]	; (8002c20 <TIM_OC3_SetConfig+0xe0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d003      	beq.n	8002ba6 <TIM_OC3_SetConfig+0x66>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a20      	ldr	r2, [pc, #128]	; (8002c24 <TIM_OC3_SetConfig+0xe4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d10d      	bne.n	8002bc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a16      	ldr	r2, [pc, #88]	; (8002c20 <TIM_OC3_SetConfig+0xe0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d003      	beq.n	8002bd2 <TIM_OC3_SetConfig+0x92>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <TIM_OC3_SetConfig+0xe4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d113      	bne.n	8002bfa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	621a      	str	r2, [r3, #32]
}
 8002c14:	bf00      	nop
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	40010000 	.word	0x40010000
 8002c24:	40010400 	.word	0x40010400

08002c28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	031b      	lsls	r3, r3, #12
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <TIM_OC4_SetConfig+0xa4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d003      	beq.n	8002c90 <TIM_OC4_SetConfig+0x68>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a11      	ldr	r2, [pc, #68]	; (8002cd0 <TIM_OC4_SetConfig+0xa8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d109      	bne.n	8002ca4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	019b      	lsls	r3, r3, #6
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	621a      	str	r2, [r3, #32]
}
 8002cbe:	bf00      	nop
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	40010400 	.word	0x40010400

08002cd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	f023 0201 	bic.w	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f023 030a 	bic.w	r3, r3, #10
 8002d10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	621a      	str	r2, [r3, #32]
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b087      	sub	sp, #28
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	f023 0210 	bic.w	r2, r3, #16
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	031b      	lsls	r3, r3, #12
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	621a      	str	r2, [r3, #32]
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b085      	sub	sp, #20
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f043 0307 	orr.w	r3, r3, #7
 8002db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	609a      	str	r2, [r3, #8]
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002de2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	021a      	lsls	r2, r3, #8
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	609a      	str	r2, [r3, #8]
}
 8002dfc:	bf00      	nop
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a1a      	ldr	r2, [r3, #32]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a1a      	ldr	r2, [r3, #32]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f003 031f 	and.w	r3, r3, #31
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e40:	431a      	orrs	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	621a      	str	r2, [r3, #32]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e05a      	b.n	8002f22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a21      	ldr	r2, [pc, #132]	; (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d022      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb8:	d01d      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1d      	ldr	r2, [pc, #116]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d018      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1b      	ldr	r2, [pc, #108]	; (8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1a      	ldr	r2, [pc, #104]	; (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00e      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a18      	ldr	r2, [pc, #96]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d009      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a17      	ldr	r2, [pc, #92]	; (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d004      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a15      	ldr	r2, [pc, #84]	; (8002f48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10c      	bne.n	8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002efc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40010000 	.word	0x40010000
 8002f34:	40000400 	.word	0x40000400
 8002f38:	40000800 	.word	0x40000800
 8002f3c:	40000c00 	.word	0x40000c00
 8002f40:	40010400 	.word	0x40010400
 8002f44:	40014000 	.word	0x40014000
 8002f48:	40001800 	.word	0x40001800

08002f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e03f      	b.n	8003006 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7fd fe48 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2224      	movs	r2, #36	; 0x24
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f829 	bl	8003010 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695a      	ldr	r2, [r3, #20]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003014:	b0c0      	sub	sp, #256	; 0x100
 8003016:	af00      	add	r7, sp, #0
 8003018:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302c:	68d9      	ldr	r1, [r3, #12]
 800302e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	ea40 0301 	orr.w	r3, r0, r1
 8003038:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800303a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	431a      	orrs	r2, r3
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	431a      	orrs	r2, r3
 8003050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800305c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003068:	f021 010c 	bic.w	r1, r1, #12
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003076:	430b      	orrs	r3, r1
 8003078:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800307a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800308a:	6999      	ldr	r1, [r3, #24]
 800308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	ea40 0301 	orr.w	r3, r0, r1
 8003096:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	4b8f      	ldr	r3, [pc, #572]	; (80032dc <UART_SetConfig+0x2cc>)
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d005      	beq.n	80030b0 <UART_SetConfig+0xa0>
 80030a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	4b8d      	ldr	r3, [pc, #564]	; (80032e0 <UART_SetConfig+0x2d0>)
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d104      	bne.n	80030ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030b0:	f7fe fad2 	bl	8001658 <HAL_RCC_GetPCLK2Freq>
 80030b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030b8:	e003      	b.n	80030c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030ba:	f7fe fab9 	bl	8001630 <HAL_RCC_GetPCLK1Freq>
 80030be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030cc:	f040 810c 	bne.w	80032e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030d4:	2200      	movs	r2, #0
 80030d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030e2:	4622      	mov	r2, r4
 80030e4:	462b      	mov	r3, r5
 80030e6:	1891      	adds	r1, r2, r2
 80030e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80030ea:	415b      	adcs	r3, r3
 80030ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030f2:	4621      	mov	r1, r4
 80030f4:	eb12 0801 	adds.w	r8, r2, r1
 80030f8:	4629      	mov	r1, r5
 80030fa:	eb43 0901 	adc.w	r9, r3, r1
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800310a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800310e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003112:	4690      	mov	r8, r2
 8003114:	4699      	mov	r9, r3
 8003116:	4623      	mov	r3, r4
 8003118:	eb18 0303 	adds.w	r3, r8, r3
 800311c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003120:	462b      	mov	r3, r5
 8003122:	eb49 0303 	adc.w	r3, r9, r3
 8003126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800312a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003136:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800313a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800313e:	460b      	mov	r3, r1
 8003140:	18db      	adds	r3, r3, r3
 8003142:	653b      	str	r3, [r7, #80]	; 0x50
 8003144:	4613      	mov	r3, r2
 8003146:	eb42 0303 	adc.w	r3, r2, r3
 800314a:	657b      	str	r3, [r7, #84]	; 0x54
 800314c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003150:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003154:	f7fd f85e 	bl	8000214 <__aeabi_uldivmod>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4b61      	ldr	r3, [pc, #388]	; (80032e4 <UART_SetConfig+0x2d4>)
 800315e:	fba3 2302 	umull	r2, r3, r3, r2
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	011c      	lsls	r4, r3, #4
 8003166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800316a:	2200      	movs	r2, #0
 800316c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003170:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003174:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003178:	4642      	mov	r2, r8
 800317a:	464b      	mov	r3, r9
 800317c:	1891      	adds	r1, r2, r2
 800317e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003180:	415b      	adcs	r3, r3
 8003182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003184:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003188:	4641      	mov	r1, r8
 800318a:	eb12 0a01 	adds.w	sl, r2, r1
 800318e:	4649      	mov	r1, r9
 8003190:	eb43 0b01 	adc.w	fp, r3, r1
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031a8:	4692      	mov	sl, r2
 80031aa:	469b      	mov	fp, r3
 80031ac:	4643      	mov	r3, r8
 80031ae:	eb1a 0303 	adds.w	r3, sl, r3
 80031b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031b6:	464b      	mov	r3, r9
 80031b8:	eb4b 0303 	adc.w	r3, fp, r3
 80031bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031d4:	460b      	mov	r3, r1
 80031d6:	18db      	adds	r3, r3, r3
 80031d8:	643b      	str	r3, [r7, #64]	; 0x40
 80031da:	4613      	mov	r3, r2
 80031dc:	eb42 0303 	adc.w	r3, r2, r3
 80031e0:	647b      	str	r3, [r7, #68]	; 0x44
 80031e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031ea:	f7fd f813 	bl	8000214 <__aeabi_uldivmod>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4611      	mov	r1, r2
 80031f4:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <UART_SetConfig+0x2d4>)
 80031f6:	fba3 2301 	umull	r2, r3, r3, r1
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	2264      	movs	r2, #100	; 0x64
 80031fe:	fb02 f303 	mul.w	r3, r2, r3
 8003202:	1acb      	subs	r3, r1, r3
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800320a:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <UART_SetConfig+0x2d4>)
 800320c:	fba3 2302 	umull	r2, r3, r3, r2
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003218:	441c      	add	r4, r3
 800321a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800321e:	2200      	movs	r2, #0
 8003220:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003224:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003228:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800322c:	4642      	mov	r2, r8
 800322e:	464b      	mov	r3, r9
 8003230:	1891      	adds	r1, r2, r2
 8003232:	63b9      	str	r1, [r7, #56]	; 0x38
 8003234:	415b      	adcs	r3, r3
 8003236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003238:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800323c:	4641      	mov	r1, r8
 800323e:	1851      	adds	r1, r2, r1
 8003240:	6339      	str	r1, [r7, #48]	; 0x30
 8003242:	4649      	mov	r1, r9
 8003244:	414b      	adcs	r3, r1
 8003246:	637b      	str	r3, [r7, #52]	; 0x34
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003254:	4659      	mov	r1, fp
 8003256:	00cb      	lsls	r3, r1, #3
 8003258:	4651      	mov	r1, sl
 800325a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800325e:	4651      	mov	r1, sl
 8003260:	00ca      	lsls	r2, r1, #3
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	4603      	mov	r3, r0
 8003268:	4642      	mov	r2, r8
 800326a:	189b      	adds	r3, r3, r2
 800326c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003270:	464b      	mov	r3, r9
 8003272:	460a      	mov	r2, r1
 8003274:	eb42 0303 	adc.w	r3, r2, r3
 8003278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003288:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800328c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003290:	460b      	mov	r3, r1
 8003292:	18db      	adds	r3, r3, r3
 8003294:	62bb      	str	r3, [r7, #40]	; 0x28
 8003296:	4613      	mov	r3, r2
 8003298:	eb42 0303 	adc.w	r3, r2, r3
 800329c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800329e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032a6:	f7fc ffb5 	bl	8000214 <__aeabi_uldivmod>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <UART_SetConfig+0x2d4>)
 80032b0:	fba3 1302 	umull	r1, r3, r3, r2
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	2164      	movs	r1, #100	; 0x64
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	3332      	adds	r3, #50	; 0x32
 80032c2:	4a08      	ldr	r2, [pc, #32]	; (80032e4 <UART_SetConfig+0x2d4>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	f003 0207 	and.w	r2, r3, #7
 80032ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4422      	add	r2, r4
 80032d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032d8:	e105      	b.n	80034e6 <UART_SetConfig+0x4d6>
 80032da:	bf00      	nop
 80032dc:	40011000 	.word	0x40011000
 80032e0:	40011400 	.word	0x40011400
 80032e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ec:	2200      	movs	r2, #0
 80032ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032fa:	4642      	mov	r2, r8
 80032fc:	464b      	mov	r3, r9
 80032fe:	1891      	adds	r1, r2, r2
 8003300:	6239      	str	r1, [r7, #32]
 8003302:	415b      	adcs	r3, r3
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
 8003306:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800330a:	4641      	mov	r1, r8
 800330c:	1854      	adds	r4, r2, r1
 800330e:	4649      	mov	r1, r9
 8003310:	eb43 0501 	adc.w	r5, r3, r1
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	00eb      	lsls	r3, r5, #3
 800331e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003322:	00e2      	lsls	r2, r4, #3
 8003324:	4614      	mov	r4, r2
 8003326:	461d      	mov	r5, r3
 8003328:	4643      	mov	r3, r8
 800332a:	18e3      	adds	r3, r4, r3
 800332c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003330:	464b      	mov	r3, r9
 8003332:	eb45 0303 	adc.w	r3, r5, r3
 8003336:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800333a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003346:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003356:	4629      	mov	r1, r5
 8003358:	008b      	lsls	r3, r1, #2
 800335a:	4621      	mov	r1, r4
 800335c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003360:	4621      	mov	r1, r4
 8003362:	008a      	lsls	r2, r1, #2
 8003364:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003368:	f7fc ff54 	bl	8000214 <__aeabi_uldivmod>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4b60      	ldr	r3, [pc, #384]	; (80034f4 <UART_SetConfig+0x4e4>)
 8003372:	fba3 2302 	umull	r2, r3, r3, r2
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	011c      	lsls	r4, r3, #4
 800337a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800337e:	2200      	movs	r2, #0
 8003380:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003384:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003388:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800338c:	4642      	mov	r2, r8
 800338e:	464b      	mov	r3, r9
 8003390:	1891      	adds	r1, r2, r2
 8003392:	61b9      	str	r1, [r7, #24]
 8003394:	415b      	adcs	r3, r3
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800339c:	4641      	mov	r1, r8
 800339e:	1851      	adds	r1, r2, r1
 80033a0:	6139      	str	r1, [r7, #16]
 80033a2:	4649      	mov	r1, r9
 80033a4:	414b      	adcs	r3, r1
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033b4:	4659      	mov	r1, fp
 80033b6:	00cb      	lsls	r3, r1, #3
 80033b8:	4651      	mov	r1, sl
 80033ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033be:	4651      	mov	r1, sl
 80033c0:	00ca      	lsls	r2, r1, #3
 80033c2:	4610      	mov	r0, r2
 80033c4:	4619      	mov	r1, r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	4642      	mov	r2, r8
 80033ca:	189b      	adds	r3, r3, r2
 80033cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033d0:	464b      	mov	r3, r9
 80033d2:	460a      	mov	r2, r1
 80033d4:	eb42 0303 	adc.w	r3, r2, r3
 80033d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80033e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033f4:	4649      	mov	r1, r9
 80033f6:	008b      	lsls	r3, r1, #2
 80033f8:	4641      	mov	r1, r8
 80033fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033fe:	4641      	mov	r1, r8
 8003400:	008a      	lsls	r2, r1, #2
 8003402:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003406:	f7fc ff05 	bl	8000214 <__aeabi_uldivmod>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	4b39      	ldr	r3, [pc, #228]	; (80034f4 <UART_SetConfig+0x4e4>)
 8003410:	fba3 1302 	umull	r1, r3, r3, r2
 8003414:	095b      	lsrs	r3, r3, #5
 8003416:	2164      	movs	r1, #100	; 0x64
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	3332      	adds	r3, #50	; 0x32
 8003422:	4a34      	ldr	r2, [pc, #208]	; (80034f4 <UART_SetConfig+0x4e4>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800342e:	441c      	add	r4, r3
 8003430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003434:	2200      	movs	r2, #0
 8003436:	673b      	str	r3, [r7, #112]	; 0x70
 8003438:	677a      	str	r2, [r7, #116]	; 0x74
 800343a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800343e:	4642      	mov	r2, r8
 8003440:	464b      	mov	r3, r9
 8003442:	1891      	adds	r1, r2, r2
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	415b      	adcs	r3, r3
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800344e:	4641      	mov	r1, r8
 8003450:	1851      	adds	r1, r2, r1
 8003452:	6039      	str	r1, [r7, #0]
 8003454:	4649      	mov	r1, r9
 8003456:	414b      	adcs	r3, r1
 8003458:	607b      	str	r3, [r7, #4]
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003466:	4659      	mov	r1, fp
 8003468:	00cb      	lsls	r3, r1, #3
 800346a:	4651      	mov	r1, sl
 800346c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003470:	4651      	mov	r1, sl
 8003472:	00ca      	lsls	r2, r1, #3
 8003474:	4610      	mov	r0, r2
 8003476:	4619      	mov	r1, r3
 8003478:	4603      	mov	r3, r0
 800347a:	4642      	mov	r2, r8
 800347c:	189b      	adds	r3, r3, r2
 800347e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003480:	464b      	mov	r3, r9
 8003482:	460a      	mov	r2, r1
 8003484:	eb42 0303 	adc.w	r3, r2, r3
 8003488:	66fb      	str	r3, [r7, #108]	; 0x6c
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	663b      	str	r3, [r7, #96]	; 0x60
 8003494:	667a      	str	r2, [r7, #100]	; 0x64
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034a2:	4649      	mov	r1, r9
 80034a4:	008b      	lsls	r3, r1, #2
 80034a6:	4641      	mov	r1, r8
 80034a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ac:	4641      	mov	r1, r8
 80034ae:	008a      	lsls	r2, r1, #2
 80034b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034b4:	f7fc feae 	bl	8000214 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <UART_SetConfig+0x4e4>)
 80034be:	fba3 1302 	umull	r1, r3, r3, r2
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	2164      	movs	r1, #100	; 0x64
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	3332      	adds	r3, #50	; 0x32
 80034d0:	4a08      	ldr	r2, [pc, #32]	; (80034f4 <UART_SetConfig+0x4e4>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	f003 020f 	and.w	r2, r3, #15
 80034dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4422      	add	r2, r4
 80034e4:	609a      	str	r2, [r3, #8]
}
 80034e6:	bf00      	nop
 80034e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034ec:	46bd      	mov	sp, r7
 80034ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034f2:	bf00      	nop
 80034f4:	51eb851f 	.word	0x51eb851f

080034f8 <lcdSendByte>:
 */

#include "lcdController.h"

static void lcdSendByte(LcdController *lcdController, LcdRegisterSelection lcdRs, uint8_t byteToSend)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	70fb      	strb	r3, [r7, #3]
 8003504:	4613      	mov	r3, r2
 8003506:	70bb      	strb	r3, [r7, #2]
	switch(lcdController->nibble)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800350e:	2b02      	cmp	r3, #2
 8003510:	f000 80e3 	beq.w	80036da <lcdSendByte+0x1e2>
 8003514:	2b02      	cmp	r3, #2
 8003516:	f300 81a6 	bgt.w	8003866 <lcdSendByte+0x36e>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <lcdSendByte+0x2c>
 800351e:	2b01      	cmp	r3, #1
 8003520:	d012      	beq.n	8003548 <lcdSendByte+0x50>
				}
			}
			break;

		default:
			break;
 8003522:	e1a0      	b.n	8003866 <lcdSendByte+0x36e>
			lcdController->highNibbleOfByteToSend = ((byteToSend >> 4) & 0x0F);
 8003524:	78bb      	ldrb	r3, [r7, #2]
 8003526:	091b      	lsrs	r3, r3, #4
 8003528:	b2da      	uxtb	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			lcdController->lowNibbleOfByteToSend = (byteToSend & 0x0F);
 8003530:	78bb      	ldrb	r3, [r7, #2]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	b2da      	uxtb	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
			lcdController->nibble = HIGH_NIBBLE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 8003546:	e193      	b.n	8003870 <lcdSendByte+0x378>
			if(lcdController->entry == 0)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d15c      	bne.n	800360c <lcdSendByte+0x114>
				HAL_GPIO_WritePin(lcdController->rsPort, lcdController->rsPin, lcdRs);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	4619      	mov	r1, r3
 8003562:	f7fd ff59 	bl	8001418 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->rwPort, lcdController->rwPin, WRITE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8003572:	2200      	movs	r2, #0
 8003574:	4619      	mov	r1, r3
 8003576:	f7fd ff4f 	bl	8001418 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->db7Port, lcdController->db7Pin, (lcdController->highNibbleOfByteToSend & 0x08));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8b3 10dc 	ldrh.w	r1, [r3, #220]	; 0xdc
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	b2db      	uxtb	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	f7fd ff40 	bl	8001418 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->db6Port, lcdController->db6Pin, (lcdController->highNibbleOfByteToSend & 0x04));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8b3 10d4 	ldrh.w	r1, [r3, #212]	; 0xd4
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	f7fd ff31 	bl	8001418 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->db5Port, lcdController->db5Pin, (lcdController->highNibbleOfByteToSend & 0x02));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f8b3 10cc 	ldrh.w	r1, [r3, #204]	; 0xcc
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	f7fd ff22 	bl	8001418 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->db4Port, lcdController->db4Pin, (lcdController->highNibbleOfByteToSend & 0x01));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	f7fd ff13 	bl	8001418 <HAL_GPIO_WritePin>
				lcdController->entry = 1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
				lcdController->delayCounterEnable = 0;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
				lcdController->countEnableDelay = TRUE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			break;
 800360a:	e12e      	b.n	800386a <lcdSendByte+0x372>
			else if(lcdController->entry == 1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003612:	2b01      	cmp	r3, #1
 8003614:	d120      	bne.n	8003658 <lcdSendByte+0x160>
				if(lcdController->delayCounterEnable >= DELAY_100_MICRO_SECONDS)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800361c:	2b09      	cmp	r3, #9
 800361e:	f240 8124 	bls.w	800386a <lcdSendByte+0x372>
					lcdController->countEnableDelay = FALSE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
					lcdController->delayCounterEnable = 0;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					HAL_GPIO_WritePin(lcdController->enPort, lcdController->enPin, GPIO_PIN_SET);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800363e:	2201      	movs	r2, #1
 8003640:	4619      	mov	r1, r3
 8003642:	f7fd fee9 	bl	8001418 <HAL_GPIO_WritePin>
					lcdController->entry = 2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
					lcdController->countEnableDelay = TRUE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			break;
 8003656:	e108      	b.n	800386a <lcdSendByte+0x372>
			else if(lcdController->entry == 2)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800365e:	2b02      	cmp	r3, #2
 8003660:	d120      	bne.n	80036a4 <lcdSendByte+0x1ac>
				if(lcdController->delayCounterEnable >= DELAY_100_MICRO_SECONDS)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003668:	2b09      	cmp	r3, #9
 800366a:	f240 80fe 	bls.w	800386a <lcdSendByte+0x372>
					lcdController->countEnableDelay = FALSE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
					lcdController->delayCounterEnable = 0;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					HAL_GPIO_WritePin(lcdController->enPort, lcdController->enPin, GPIO_PIN_RESET);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800368a:	2200      	movs	r2, #0
 800368c:	4619      	mov	r1, r3
 800368e:	f7fd fec3 	bl	8001418 <HAL_GPIO_WritePin>
					lcdController->entry = 3;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2203      	movs	r2, #3
 8003696:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
					lcdController->countEnableDelay = TRUE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			break;
 80036a2:	e0e2      	b.n	800386a <lcdSendByte+0x372>
				if(lcdController->delayCounterEnable >= DELAY_100_MICRO_SECONDS)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036aa:	2b09      	cmp	r3, #9
 80036ac:	f240 80dd 	bls.w	800386a <lcdSendByte+0x372>
					lcdController->countEnableDelay = FALSE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
					lcdController->delayCounterEnable = 0;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					lcdController->entry = 0;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
					lcdController->nibble = LOW_NIBBLE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
					lcdController->byteSended = FALSE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
			break;
 80036d8:	e0c7      	b.n	800386a <lcdSendByte+0x372>
			if(lcdController->entry == 0)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d15c      	bne.n	800379e <lcdSendByte+0x2a6>
				HAL_GPIO_WritePin(lcdController->rsPort, lcdController->rsPin, lcdRs);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	4619      	mov	r1, r3
 80036f4:	f7fd fe90 	bl	8001418 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->rwPort, lcdController->rwPin, WRITE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8003704:	2200      	movs	r2, #0
 8003706:	4619      	mov	r1, r3
 8003708:	f7fd fe86 	bl	8001418 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->db7Port, lcdController->db7Pin, (lcdController->lowNibbleOfByteToSend & 0x08));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f8b3 10dc 	ldrh.w	r1, [r3, #220]	; 0xdc
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	f7fd fe77 	bl	8001418 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->db6Port, lcdController->db6Pin, (lcdController->lowNibbleOfByteToSend & 0x04));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8b3 10d4 	ldrh.w	r1, [r3, #212]	; 0xd4
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	b2db      	uxtb	r3, r3
 8003742:	461a      	mov	r2, r3
 8003744:	f7fd fe68 	bl	8001418 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->db5Port, lcdController->db5Pin, (lcdController->lowNibbleOfByteToSend & 0x02));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f8b3 10cc 	ldrh.w	r1, [r3, #204]	; 0xcc
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	b2db      	uxtb	r3, r3
 8003760:	461a      	mov	r2, r3
 8003762:	f7fd fe59 	bl	8001418 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->db4Port, lcdController->db4Pin, (lcdController->lowNibbleOfByteToSend & 0x01));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	f7fd fe4a 	bl	8001418 <HAL_GPIO_WritePin>
				lcdController->entry = 1;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
				lcdController->delayCounterEnable = 0;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
				lcdController->countEnableDelay = TRUE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			break;
 800379c:	e067      	b.n	800386e <lcdSendByte+0x376>
			else if(lcdController->entry == 1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d11f      	bne.n	80037e8 <lcdSendByte+0x2f0>
				if(lcdController->delayCounterEnable >= DELAY_100_MICRO_SECONDS)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037ae:	2b09      	cmp	r3, #9
 80037b0:	d95d      	bls.n	800386e <lcdSendByte+0x376>
					lcdController->countEnableDelay = FALSE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
					lcdController->delayCounterEnable = 0;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					HAL_GPIO_WritePin(lcdController->enPort, lcdController->enPin, GPIO_PIN_SET);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80037ce:	2201      	movs	r2, #1
 80037d0:	4619      	mov	r1, r3
 80037d2:	f7fd fe21 	bl	8001418 <HAL_GPIO_WritePin>
					lcdController->entry = 2;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2202      	movs	r2, #2
 80037da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
					lcdController->countEnableDelay = TRUE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			break;
 80037e6:	e042      	b.n	800386e <lcdSendByte+0x376>
			else if(lcdController->entry == 2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d11f      	bne.n	8003832 <lcdSendByte+0x33a>
				if(lcdController->delayCounterEnable >= DELAY_100_MICRO_SECONDS)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037f8:	2b09      	cmp	r3, #9
 80037fa:	d938      	bls.n	800386e <lcdSendByte+0x376>
					lcdController->countEnableDelay = FALSE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
					lcdController->delayCounterEnable = 0;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					HAL_GPIO_WritePin(lcdController->enPort, lcdController->enPin, GPIO_PIN_RESET);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8003818:	2200      	movs	r2, #0
 800381a:	4619      	mov	r1, r3
 800381c:	f7fd fdfc 	bl	8001418 <HAL_GPIO_WritePin>
					lcdController->entry = 3;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2203      	movs	r2, #3
 8003824:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
					lcdController->countEnableDelay = TRUE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			break;
 8003830:	e01d      	b.n	800386e <lcdSendByte+0x376>
				if(lcdController->delayCounterEnable >= DELAY_100_MICRO_SECONDS)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003838:	2b09      	cmp	r3, #9
 800383a:	d918      	bls.n	800386e <lcdSendByte+0x376>
					lcdController->countEnableDelay = FALSE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
					lcdController->delayCounterEnable = 0;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					lcdController->entry = 0;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
					lcdController->nibble = DIVISION;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
					lcdController->byteSended = TRUE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
			break;
 8003864:	e003      	b.n	800386e <lcdSendByte+0x376>
			break;
 8003866:	bf00      	nop
 8003868:	e002      	b.n	8003870 <lcdSendByte+0x378>
			break;
 800386a:	bf00      	nop
 800386c:	e000      	b.n	8003870 <lcdSendByte+0x378>
			break;
 800386e:	bf00      	nop
	}
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <lcdControllerInitStruct>:
		GPIO_TypeDef *db5Port, uint16_t db5Pin,
		GPIO_TypeDef *db6Port, uint16_t db6Pin,
		GPIO_TypeDef *db7Port, uint16_t db7Pin,
		GPIO_TypeDef *onOffPort, uint16_t onOffPin,
		TIM_HandleTypeDef *backlightPwmTimer, uint8_t backlightPwmChannel)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	4613      	mov	r3, r2
 8003886:	80fb      	strh	r3, [r7, #6]
	lcdController->command = COMMAND_0;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	lcdController->backlightPwmTimer = backlightPwmTimer;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	lcdController->backlightPwmChannel = backlightPwmChannel;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800389e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	lcdController->backlightPercent = BL_00_PERCENT;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	lcdController->initialized = FALSE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	lcdController->counterAux = 0;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	lcdController->counterUnlock = 0;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	lcdController->counterInitCycles1 = 0;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	lcdController->counterInitCycles2 = 0;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	lcdController->byteToSend = COMMAND;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	lcdController->updatePosition = FALSE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	lcdController->currentRow = 0;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	lcdController->currentColumm = 0;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	lcdController->delayCounter = 0;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	lcdController->delayCounterEnable = 0;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	lcdController->entry = 0;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	lcdController->byteSended = FALSE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	lcdController->countDelay = FALSE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	lcdController->countEnableDelay = FALSE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
	lcdController->nibble = DIVISION;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	lcdController->rsPort = rsPort;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	lcdController->rsPin = rsPin;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	88fa      	ldrh	r2, [r7, #6]
 8003936:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	lcdController->rwPort = rwPort;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	lcdController->rwPin = rwPin;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8b3a      	ldrh	r2, [r7, #24]
 8003946:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	lcdController->enPort = enPort;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	lcdController->enPin = enPin;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8c3a      	ldrh	r2, [r7, #32]
 8003956:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	lcdController->db4Port = db4Port;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	lcdController->db4Pin = db4Pin;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003966:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	lcdController->db5Port = db5Port;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800396e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	lcdController->db5Pin = db5Pin;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003976:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
	lcdController->db6Port = db6Port;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800397e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	lcdController->db6Pin = db6Pin;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003986:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	lcdController->db7Port = db7Port;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800398e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	lcdController->db7Pin = db7Pin;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003998:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	lcdController->onOffPort = onOffPort;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	lcdController->onOffPin = onOffPin;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80039aa:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4

	memset((char *) lcdController->stringMatrixBuffer[0], ' ', QTY_OF_CHARS_PER_ROW);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2210      	movs	r2, #16
 80039b2:	2120      	movs	r1, #32
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fd21 	bl	80043fc <memset>
	memset((char *) lcdController->stringMatrixBuffer[1], ' ', QTY_OF_CHARS_PER_ROW);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3311      	adds	r3, #17
 80039be:	2210      	movs	r2, #16
 80039c0:	2120      	movs	r1, #32
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fd1a 	bl	80043fc <memset>
	memset((char *) lcdController->stringMatrixBuffer[2], ' ', QTY_OF_CHARS_PER_ROW);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3322      	adds	r3, #34	; 0x22
 80039cc:	2210      	movs	r2, #16
 80039ce:	2120      	movs	r1, #32
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fd13 	bl	80043fc <memset>
	memset((char *) lcdController->stringMatrixBuffer[3], ' ', QTY_OF_CHARS_PER_ROW);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	3333      	adds	r3, #51	; 0x33
 80039da:	2210      	movs	r2, #16
 80039dc:	2120      	movs	r1, #32
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fd0c 	bl	80043fc <memset>

	memset((char *) lcdController->stringMatrixShow[0], ' ', QTY_OF_CHARS_PER_ROW);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	3344      	adds	r3, #68	; 0x44
 80039e8:	2210      	movs	r2, #16
 80039ea:	2120      	movs	r1, #32
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fd05 	bl	80043fc <memset>
	memset((char *) lcdController->stringMatrixShow[1], ' ', QTY_OF_CHARS_PER_ROW);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	3355      	adds	r3, #85	; 0x55
 80039f6:	2210      	movs	r2, #16
 80039f8:	2120      	movs	r1, #32
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fcfe 	bl	80043fc <memset>
	memset((char *) lcdController->stringMatrixShow[2], ' ', QTY_OF_CHARS_PER_ROW);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3366      	adds	r3, #102	; 0x66
 8003a04:	2210      	movs	r2, #16
 8003a06:	2120      	movs	r1, #32
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fcf7 	bl	80043fc <memset>
	memset((char *) lcdController->stringMatrixShow[3], ' ', QTY_OF_CHARS_PER_ROW);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3377      	adds	r3, #119	; 0x77
 8003a12:	2210      	movs	r2, #16
 8003a14:	2120      	movs	r1, #32
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fcf0 	bl	80043fc <memset>
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <lcdControllerInit>:

void lcdControllerInit(LcdController *lcdController)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
	lcdControllerSetBacklight(lcdController, BL_00_PERCENT);
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fc2c 	bl	800428c <lcdControllerSetBacklight>
	switch(lcdController->command)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003a3a:	2b0d      	cmp	r3, #13
 8003a3c:	f200 82bf 	bhi.w	8003fbe <lcdControllerInit+0x59a>
 8003a40:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <lcdControllerInit+0x24>)
 8003a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a46:	bf00      	nop
 8003a48:	08003a81 	.word	0x08003a81
 8003a4c:	08003ab9 	.word	0x08003ab9
 8003a50:	08003b73 	.word	0x08003b73
 8003a54:	08003c59 	.word	0x08003c59
 8003a58:	08003c91 	.word	0x08003c91
 8003a5c:	08003cdd 	.word	0x08003cdd
 8003a60:	08003d29 	.word	0x08003d29
 8003a64:	08003d79 	.word	0x08003d79
 8003a68:	08003dc5 	.word	0x08003dc5
 8003a6c:	08003e11 	.word	0x08003e11
 8003a70:	08003e5d 	.word	0x08003e5d
 8003a74:	08003ed3 	.word	0x08003ed3
 8003a78:	08003f19 	.word	0x08003f19
 8003a7c:	08003f4f 	.word	0x08003f4f
	{
		case COMMAND_0:
			lcdControllerOnOff(lcdController, LCD_OFF);
 8003a80:	2101      	movs	r1, #1
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fc38 	bl	80042f8 <lcdControllerOnOff>
			lcdController->countDelay = TRUE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			if(lcdController->delayCounter >= DELAY_2000000_MICRO_SECONDS)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a96:	4ab7      	ldr	r2, [pc, #732]	; (8003d74 <lcdControllerInit+0x350>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	f240 827b 	bls.w	8003f94 <lcdControllerInit+0x570>
			{
				lcdController->countDelay = FALSE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				lcdController->delayCounter = 0;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				lcdController->command = COMMAND_1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			}
			break;
 8003ab6:	e26d      	b.n	8003f94 <lcdControllerInit+0x570>

		case COMMAND_1:
			HAL_GPIO_WritePin(lcdController->enPort, lcdController->enPin, GPIO_PIN_SET);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	f7fd fca6 	bl	8001418 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->rwPort, lcdController->rwPin, GPIO_PIN_RESET);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8003ad8:	2200      	movs	r2, #0
 8003ada:	4619      	mov	r1, r3
 8003adc:	f7fd fc9c 	bl	8001418 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->rsPort, lcdController->rsPin, GPIO_PIN_RESET);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003aec:	2200      	movs	r2, #0
 8003aee:	4619      	mov	r1, r3
 8003af0:	f7fd fc92 	bl	8001418 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->db7Port, lcdController->db7Pin, GPIO_PIN_RESET);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
 8003b00:	2200      	movs	r2, #0
 8003b02:	4619      	mov	r1, r3
 8003b04:	f7fd fc88 	bl	8001418 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->db6Port, lcdController->db6Pin, GPIO_PIN_RESET);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 8003b14:	2200      	movs	r2, #0
 8003b16:	4619      	mov	r1, r3
 8003b18:	f7fd fc7e 	bl	8001418 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->db5Port, lcdController->db5Pin, GPIO_PIN_RESET);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8003b28:	2200      	movs	r2, #0
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	f7fd fc74 	bl	8001418 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->db4Port, lcdController->db4Pin, GPIO_PIN_RESET);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	4619      	mov	r1, r3
 8003b40:	f7fd fc6a 	bl	8001418 <HAL_GPIO_WritePin>

			lcdController->countDelay = TRUE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			if(lcdController->delayCounter >= DELAY_1000_MICRO_SECONDS)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b52:	2b63      	cmp	r3, #99	; 0x63
 8003b54:	f240 8220 	bls.w	8003f98 <lcdControllerInit+0x574>
			{
				lcdController->countDelay = FALSE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				lcdController->delayCounter = 0;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				lcdController->command = COMMAND_2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			}
			break;
 8003b70:	e212      	b.n	8003f98 <lcdControllerInit+0x574>

		case COMMAND_2:
			HAL_GPIO_WritePin(lcdController->enPort, lcdController->enPin, GPIO_PIN_RESET);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8003b7e:	2200      	movs	r2, #0
 8003b80:	4619      	mov	r1, r3
 8003b82:	f7fd fc49 	bl	8001418 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->rwPort, lcdController->rwPin, GPIO_PIN_RESET);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8003b92:	2200      	movs	r2, #0
 8003b94:	4619      	mov	r1, r3
 8003b96:	f7fd fc3f 	bl	8001418 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->rsPort, lcdController->rsPin, GPIO_PIN_RESET);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f7fd fc35 	bl	8001418 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->db7Port, lcdController->db7Pin, GPIO_PIN_RESET);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
 8003bba:	2200      	movs	r2, #0
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	f7fd fc2b 	bl	8001418 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->db6Port, lcdController->db6Pin, GPIO_PIN_RESET);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 8003bce:	2200      	movs	r2, #0
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	f7fd fc21 	bl	8001418 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->db5Port, lcdController->db5Pin, GPIO_PIN_RESET);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8003be2:	2200      	movs	r2, #0
 8003be4:	4619      	mov	r1, r3
 8003be6:	f7fd fc17 	bl	8001418 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->db4Port, lcdController->db4Pin, GPIO_PIN_RESET);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	f7fd fc0d 	bl	8001418 <HAL_GPIO_WritePin>

			lcdController->countDelay = TRUE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			if(lcdController->delayCounter >= DELAY_1000_MICRO_SECONDS)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c0c:	2b63      	cmp	r3, #99	; 0x63
 8003c0e:	f240 81c5 	bls.w	8003f9c <lcdControllerInit+0x578>
			{
				lcdController->countDelay = FALSE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				lcdController->delayCounter = 0;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				lcdController->counterUnlock++;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8003c28:	3301      	adds	r3, #1
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
				if(lcdController->counterUnlock < 16)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8003c38:	2b0f      	cmp	r3, #15
 8003c3a:	d804      	bhi.n	8003c46 <lcdControllerInit+0x222>
				{
					lcdController->command = COMMAND_1;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
				{
					lcdController->command = COMMAND_3;
					lcdController->counterUnlock = 0;
				}
			}
			break;
 8003c44:	e1aa      	b.n	8003f9c <lcdControllerInit+0x578>
					lcdController->command = COMMAND_3;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2203      	movs	r2, #3
 8003c4a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
					lcdController->counterUnlock = 0;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
			break;
 8003c56:	e1a1      	b.n	8003f9c <lcdControllerInit+0x578>

		case COMMAND_3:
			lcdControllerOnOff(lcdController, LCD_ON);
 8003c58:	2100      	movs	r1, #0
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fb4c 	bl	80042f8 <lcdControllerOnOff>
			lcdController->countDelay = TRUE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			if(lcdController->delayCounter >= DELAY_2000000_MICRO_SECONDS)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c6e:	4a41      	ldr	r2, [pc, #260]	; (8003d74 <lcdControllerInit+0x350>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	f240 8195 	bls.w	8003fa0 <lcdControllerInit+0x57c>
			{
				lcdController->countDelay = FALSE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				lcdController->delayCounter = 0;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				lcdController->command = COMMAND_4;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2204      	movs	r2, #4
 8003c8a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			}
			break;
 8003c8e:	e187      	b.n	8003fa0 <lcdControllerInit+0x57c>

		case COMMAND_4:
			if(lcdController->byteSended == TRUE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d11a      	bne.n	8003cd0 <lcdControllerInit+0x2ac>
			{
				lcdController->countDelay = TRUE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				if(lcdController->delayCounter >= DELAY_1000_MICRO_SECONDS)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ca8:	2b63      	cmp	r3, #99	; 0x63
 8003caa:	f240 817b 	bls.w	8003fa4 <lcdControllerInit+0x580>
				{
					lcdController->countDelay = FALSE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
					lcdController->delayCounter = 0;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					lcdController->command = COMMAND_5;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2205      	movs	r2, #5
 8003cc2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
					lcdController->byteSended = FALSE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
			}
			else
			{
				lcdSendByte(lcdController, COMMAND, FUNCTION_SET_4BIT_MULTILINE_5X8DOTS);
			}
			break;
 8003cce:	e169      	b.n	8003fa4 <lcdControllerInit+0x580>
				lcdSendByte(lcdController, COMMAND, FUNCTION_SET_4BIT_MULTILINE_5X8DOTS);
 8003cd0:	2228      	movs	r2, #40	; 0x28
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff fc0f 	bl	80034f8 <lcdSendByte>
			break;
 8003cda:	e163      	b.n	8003fa4 <lcdControllerInit+0x580>

		case COMMAND_5:
			if(lcdController->byteSended == TRUE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d11a      	bne.n	8003d1c <lcdControllerInit+0x2f8>
			{
				lcdController->countDelay = TRUE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				if(lcdController->delayCounter >= DELAY_1000_MICRO_SECONDS)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cf4:	2b63      	cmp	r3, #99	; 0x63
 8003cf6:	f240 8157 	bls.w	8003fa8 <lcdControllerInit+0x584>
				{
					lcdController->countDelay = FALSE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
					lcdController->delayCounter = 0;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					lcdController->command = COMMAND_6;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2206      	movs	r2, #6
 8003d0e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
					lcdController->byteSended = FALSE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
			}
			else
			{
				lcdSendByte(lcdController, COMMAND, CURSOR_OR_DISPLAY_SHIFT_SHIFTCURSORTOTHERIGHT);
			}
			break;
 8003d1a:	e145      	b.n	8003fa8 <lcdControllerInit+0x584>
				lcdSendByte(lcdController, COMMAND, CURSOR_OR_DISPLAY_SHIFT_SHIFTCURSORTOTHERIGHT);
 8003d1c:	2214      	movs	r2, #20
 8003d1e:	2100      	movs	r1, #0
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff fbe9 	bl	80034f8 <lcdSendByte>
			break;
 8003d26:	e13f      	b.n	8003fa8 <lcdControllerInit+0x584>

		case COMMAND_6:
			if(lcdController->byteSended == TRUE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d11a      	bne.n	8003d68 <lcdControllerInit+0x344>
			{
				lcdController->countDelay = TRUE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				if(lcdController->delayCounter >= DELAY_2500_MICRO_SECONDS)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d40:	2bf9      	cmp	r3, #249	; 0xf9
 8003d42:	f240 8133 	bls.w	8003fac <lcdControllerInit+0x588>
				{
					lcdController->countDelay = FALSE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
					lcdController->delayCounter = 0;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					lcdController->command = COMMAND_7;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2207      	movs	r2, #7
 8003d5a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
					lcdController->byteSended = FALSE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
			}
			else
			{
				lcdSendByte(lcdController, COMMAND, CLEAR_DISPLAY);
			}
			break;
 8003d66:	e121      	b.n	8003fac <lcdControllerInit+0x588>
				lcdSendByte(lcdController, COMMAND, CLEAR_DISPLAY);
 8003d68:	2201      	movs	r2, #1
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff fbc3 	bl	80034f8 <lcdSendByte>
			break;
 8003d72:	e11b      	b.n	8003fac <lcdControllerInit+0x588>
 8003d74:	00030d3f 	.word	0x00030d3f

		case COMMAND_7:
			if(lcdController->byteSended == TRUE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d11a      	bne.n	8003db8 <lcdControllerInit+0x394>
			{
				lcdController->countDelay = TRUE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				if(lcdController->delayCounter >= DELAY_2500_MICRO_SECONDS)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d90:	2bf9      	cmp	r3, #249	; 0xf9
 8003d92:	f240 810d 	bls.w	8003fb0 <lcdControllerInit+0x58c>
				{
					lcdController->countDelay = FALSE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
					lcdController->delayCounter = 0;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					lcdController->command = COMMAND_8;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2208      	movs	r2, #8
 8003daa:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
					lcdController->byteSended = FALSE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
			}
			else
			{
				lcdSendByte(lcdController, COMMAND, RETURN_HOME);
			}
			break;
 8003db6:	e0fb      	b.n	8003fb0 <lcdControllerInit+0x58c>
				lcdSendByte(lcdController, COMMAND, RETURN_HOME);
 8003db8:	2202      	movs	r2, #2
 8003dba:	2100      	movs	r1, #0
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff fb9b 	bl	80034f8 <lcdSendByte>
			break;
 8003dc2:	e0f5      	b.n	8003fb0 <lcdControllerInit+0x58c>

		case COMMAND_8:
			if(lcdController->byteSended == TRUE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d11a      	bne.n	8003e04 <lcdControllerInit+0x3e0>
			{
				lcdController->countDelay = TRUE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				if(lcdController->delayCounter >= DELAY_1000_MICRO_SECONDS)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ddc:	2b63      	cmp	r3, #99	; 0x63
 8003dde:	f240 80e9 	bls.w	8003fb4 <lcdControllerInit+0x590>
				{
					lcdController->countDelay = FALSE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
					lcdController->delayCounter = 0;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					lcdController->command = COMMAND_9;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2209      	movs	r2, #9
 8003df6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
					lcdController->byteSended = FALSE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
			}
			else
			{
				lcdSendByte(lcdController, COMMAND, ENTRY_MODE_SET_INCREMENT_NOTSHIFT);
			}
			break;
 8003e02:	e0d7      	b.n	8003fb4 <lcdControllerInit+0x590>
				lcdSendByte(lcdController, COMMAND, ENTRY_MODE_SET_INCREMENT_NOTSHIFT);
 8003e04:	2206      	movs	r2, #6
 8003e06:	2100      	movs	r1, #0
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff fb75 	bl	80034f8 <lcdSendByte>
			break;
 8003e0e:	e0d1      	b.n	8003fb4 <lcdControllerInit+0x590>

		case COMMAND_9:
			if(lcdController->byteSended == TRUE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d11a      	bne.n	8003e50 <lcdControllerInit+0x42c>
			{
				lcdController->countDelay = TRUE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				if(lcdController->delayCounter >= DELAY_1000_MICRO_SECONDS)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e28:	2b63      	cmp	r3, #99	; 0x63
 8003e2a:	f240 80c5 	bls.w	8003fb8 <lcdControllerInit+0x594>
				{
					lcdController->countDelay = FALSE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
					lcdController->delayCounter = 0;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					lcdController->byteSended = FALSE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
					lcdController->command = COMMAND_10;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	220a      	movs	r2, #10
 8003e4a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			}
			else
			{
				lcdSendByte(lcdController, COMMAND, DISPLAY_ON_OFF_CONTROL_DISPLAYON_CURSOROFF);
			}
			break;
 8003e4e:	e0b3      	b.n	8003fb8 <lcdControllerInit+0x594>
				lcdSendByte(lcdController, COMMAND, DISPLAY_ON_OFF_CONTROL_DISPLAYON_CURSOROFF);
 8003e50:	220c      	movs	r2, #12
 8003e52:	2100      	movs	r1, #0
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff fb4f 	bl	80034f8 <lcdSendByte>
			break;
 8003e5a:	e0ad      	b.n	8003fb8 <lcdControllerInit+0x594>

		case COMMAND_10:
			if(lcdController->counterAux == 0)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d118      	bne.n	8003e98 <lcdControllerInit+0x474>
			{
				lcdControllerSetString(lcdController, ROW_0, (uint8_t *) "################");
 8003e66:	4a58      	ldr	r2, [pc, #352]	; (8003fc8 <lcdControllerInit+0x5a4>)
 8003e68:	2180      	movs	r1, #128	; 0x80
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f9b5 	bl	80041da <lcdControllerSetString>
				lcdControllerSetString(lcdController, ROW_1, (uint8_t *) "################");
 8003e70:	4a55      	ldr	r2, [pc, #340]	; (8003fc8 <lcdControllerInit+0x5a4>)
 8003e72:	21c0      	movs	r1, #192	; 0xc0
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f9b0 	bl	80041da <lcdControllerSetString>
				lcdControllerSetString(lcdController, ROW_2, (uint8_t *) "################");
 8003e7a:	4a53      	ldr	r2, [pc, #332]	; (8003fc8 <lcdControllerInit+0x5a4>)
 8003e7c:	2190      	movs	r1, #144	; 0x90
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f9ab 	bl	80041da <lcdControllerSetString>
				lcdControllerSetString(lcdController, ROW_3, (uint8_t *) "################");
 8003e84:	4a50      	ldr	r2, [pc, #320]	; (8003fc8 <lcdControllerInit+0x5a4>)
 8003e86:	21d0      	movs	r1, #208	; 0xd0
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f9a6 	bl	80041da <lcdControllerSetString>
				lcdController->counterAux = 1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8003e96:	e017      	b.n	8003ec8 <lcdControllerInit+0x4a4>
			}
			else
			{
				lcdControllerSetString(lcdController, ROW_0, (uint8_t *) "                ");
 8003e98:	4a4c      	ldr	r2, [pc, #304]	; (8003fcc <lcdControllerInit+0x5a8>)
 8003e9a:	2180      	movs	r1, #128	; 0x80
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f99c 	bl	80041da <lcdControllerSetString>
				lcdControllerSetString(lcdController, ROW_1, (uint8_t *) "                ");
 8003ea2:	4a4a      	ldr	r2, [pc, #296]	; (8003fcc <lcdControllerInit+0x5a8>)
 8003ea4:	21c0      	movs	r1, #192	; 0xc0
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f997 	bl	80041da <lcdControllerSetString>
				lcdControllerSetString(lcdController, ROW_2, (uint8_t *) "                ");
 8003eac:	4a47      	ldr	r2, [pc, #284]	; (8003fcc <lcdControllerInit+0x5a8>)
 8003eae:	2190      	movs	r1, #144	; 0x90
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f992 	bl	80041da <lcdControllerSetString>
				lcdControllerSetString(lcdController, ROW_3, (uint8_t *) "                ");
 8003eb6:	4a45      	ldr	r2, [pc, #276]	; (8003fcc <lcdControllerInit+0x5a8>)
 8003eb8:	21d0      	movs	r1, #208	; 0xd0
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f98d 	bl	80041da <lcdControllerSetString>
				lcdController->counterAux = 0;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			}
			lcdController->command = COMMAND_11;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	220b      	movs	r2, #11
 8003ecc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			break;
 8003ed0:	e075      	b.n	8003fbe <lcdControllerInit+0x59a>

		case COMMAND_11:
			lcdController->counterInitCycles1++;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003ed8:	3301      	adds	r3, #1
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			if(lcdController->counterInitCycles1 < 2*(QTY_OF_ROWS * QTY_OF_CHARS_PER_ROW))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003ee8:	b25b      	sxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	db03      	blt.n	8003ef6 <lcdControllerInit+0x4d2>
			{
				lcdControllerUpdate(lcdController);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f870 	bl	8003fd4 <lcdControllerUpdate>
				lcdController->command = COMMAND_12;
				lcdController->currentRow = 0;
				lcdController->currentColumm = 0;
				lcdController->counterInitCycles1 = 0;
			}
			break;
 8003ef4:	e063      	b.n	8003fbe <lcdControllerInit+0x59a>
				lcdController->command = COMMAND_12;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	220c      	movs	r2, #12
 8003efa:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
				lcdController->currentRow = 0;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
				lcdController->currentColumm = 0;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
				lcdController->counterInitCycles1 = 0;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			break;
 8003f16:	e052      	b.n	8003fbe <lcdControllerInit+0x59a>

		case COMMAND_12:
			lcdController->counterInitCycles2++;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003f1e:	3301      	adds	r3, #1
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
			if(lcdController->counterInitCycles2 > 1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d908      	bls.n	8003f44 <lcdControllerInit+0x520>
			{
				lcdController->command = COMMAND_13;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	220d      	movs	r2, #13
 8003f36:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
				lcdController->counterInitCycles2 = 0;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
			}
			else
			{
				lcdController->command = COMMAND_4;
			}
			break;
 8003f42:	e03c      	b.n	8003fbe <lcdControllerInit+0x59a>
				lcdController->command = COMMAND_4;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2204      	movs	r2, #4
 8003f48:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			break;
 8003f4c:	e037      	b.n	8003fbe <lcdControllerInit+0x59a>

		case COMMAND_13:
			lcdController->countDelay = TRUE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			if(lcdController->delayCounter >= DELAY_2000000_MICRO_SECONDS)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f5c:	4a1c      	ldr	r2, [pc, #112]	; (8003fd0 <lcdControllerInit+0x5ac>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d92c      	bls.n	8003fbc <lcdControllerInit+0x598>
			{
				lcdController->countDelay = FALSE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				lcdController->delayCounter = 0;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				lcdController->command = COMMAND_0;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
				lcdController->initialized = TRUE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
				lcdController->byteToSend = COMMAND;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
				lcdControllerSetBacklight(lcdController, BL_60_PERCENT);
 8003f8a:	211e      	movs	r1, #30
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f97d 	bl	800428c <lcdControllerSetBacklight>
			}
			break;
 8003f92:	e013      	b.n	8003fbc <lcdControllerInit+0x598>
			break;
 8003f94:	bf00      	nop
 8003f96:	e012      	b.n	8003fbe <lcdControllerInit+0x59a>
			break;
 8003f98:	bf00      	nop
 8003f9a:	e010      	b.n	8003fbe <lcdControllerInit+0x59a>
			break;
 8003f9c:	bf00      	nop
 8003f9e:	e00e      	b.n	8003fbe <lcdControllerInit+0x59a>
			break;
 8003fa0:	bf00      	nop
 8003fa2:	e00c      	b.n	8003fbe <lcdControllerInit+0x59a>
			break;
 8003fa4:	bf00      	nop
 8003fa6:	e00a      	b.n	8003fbe <lcdControllerInit+0x59a>
			break;
 8003fa8:	bf00      	nop
 8003faa:	e008      	b.n	8003fbe <lcdControllerInit+0x59a>
			break;
 8003fac:	bf00      	nop
 8003fae:	e006      	b.n	8003fbe <lcdControllerInit+0x59a>
			break;
 8003fb0:	bf00      	nop
 8003fb2:	e004      	b.n	8003fbe <lcdControllerInit+0x59a>
			break;
 8003fb4:	bf00      	nop
 8003fb6:	e002      	b.n	8003fbe <lcdControllerInit+0x59a>
			break;
 8003fb8:	bf00      	nop
 8003fba:	e000      	b.n	8003fbe <lcdControllerInit+0x59a>
			break;
 8003fbc:	bf00      	nop
	}
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	0800444c 	.word	0x0800444c
 8003fcc:	08004460 	.word	0x08004460
 8003fd0:	00030d3f 	.word	0x00030d3f

08003fd4 <lcdControllerUpdate>:

void lcdControllerUpdate(LcdController *lcdController)
{
 8003fd4:	b5b0      	push	{r4, r5, r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
	uint8_t currentCharInDisplay = lcdController->stringMatrixShow[lcdController->currentRow][lcdController->currentColumm];
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003fea:	4618      	mov	r0, r3
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	460b      	mov	r3, r1
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	440b      	add	r3, r1
 8003ff4:	4413      	add	r3, r2
 8003ff6:	4403      	add	r3, r0
 8003ff8:	3344      	adds	r3, #68	; 0x44
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	73bb      	strb	r3, [r7, #14]
	uint8_t newCharToDisplay = lcdController->stringMatrixBuffer[lcdController->currentRow][lcdController->currentColumm];
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8004004:	4619      	mov	r1, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800400c:	4618      	mov	r0, r3
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	440b      	add	r3, r1
 8004016:	4413      	add	r3, r2
 8004018:	4403      	add	r3, r0
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	737b      	strb	r3, [r7, #13]
	uint8_t position = 0;
 800401e:	2300      	movs	r3, #0
 8004020:	73fb      	strb	r3, [r7, #15]

	if(currentCharInDisplay != newCharToDisplay)
 8004022:	7bba      	ldrb	r2, [r7, #14]
 8004024:	7b7b      	ldrb	r3, [r7, #13]
 8004026:	429a      	cmp	r2, r3
 8004028:	d02f      	beq.n	800408a <lcdControllerUpdate+0xb6>
	{
		lcdController->updatePosition = TRUE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

		if(lcdController->currentRow == 0)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8004038:	2b00      	cmp	r3, #0
 800403a:	d105      	bne.n	8004048 <lcdControllerUpdate+0x74>
		{
			position = ROW_0 + lcdController->currentColumm;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8004042:	3b80      	subs	r3, #128	; 0x80
 8004044:	73fb      	strb	r3, [r7, #15]
 8004046:	e042      	b.n	80040ce <lcdControllerUpdate+0xfa>
		}
		else if(lcdController->currentRow == 1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800404e:	2b01      	cmp	r3, #1
 8004050:	d105      	bne.n	800405e <lcdControllerUpdate+0x8a>
		{
			position = ROW_1 + lcdController->currentColumm;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8004058:	3b40      	subs	r3, #64	; 0x40
 800405a:	73fb      	strb	r3, [r7, #15]
 800405c:	e037      	b.n	80040ce <lcdControllerUpdate+0xfa>
		}
		else if(lcdController->currentRow == 2)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8004064:	2b02      	cmp	r3, #2
 8004066:	d105      	bne.n	8004074 <lcdControllerUpdate+0xa0>
		{
			position = ROW_2 + lcdController->currentColumm;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800406e:	3b70      	subs	r3, #112	; 0x70
 8004070:	73fb      	strb	r3, [r7, #15]
 8004072:	e02c      	b.n	80040ce <lcdControllerUpdate+0xfa>
		}
		else if(lcdController->currentRow == 3)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800407a:	2b03      	cmp	r3, #3
 800407c:	d127      	bne.n	80040ce <lcdControllerUpdate+0xfa>
		{
			position = ROW_3 + lcdController->currentColumm;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8004084:	3b30      	subs	r3, #48	; 0x30
 8004086:	73fb      	strb	r3, [r7, #15]
 8004088:	e021      	b.n	80040ce <lcdControllerUpdate+0xfa>
		}
	}
	else
	{
		lcdController->currentColumm++;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8004090:	3301      	adds	r3, #1
 8004092:	b2da      	uxtb	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
		if(lcdController->currentColumm > QTY_OF_CHARS_PER_ROW-1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 80040a0:	2b0f      	cmp	r3, #15
 80040a2:	d914      	bls.n	80040ce <lcdControllerUpdate+0xfa>
		{
			lcdController->currentColumm = 0;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
			lcdController->currentRow++;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80040b2:	3301      	adds	r3, #1
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			if(lcdController->currentRow > QTY_OF_ROWS-1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d903      	bls.n	80040ce <lcdControllerUpdate+0xfa>
			{
				lcdController->currentRow = 0;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			}
		}
	}

	if (lcdController->updatePosition == TRUE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d177      	bne.n	80041c8 <lcdControllerUpdate+0x1f4>
	{
		switch (lcdController->byteToSend)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <lcdControllerUpdate+0x114>
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d026      	beq.n	8004134 <lcdControllerUpdate+0x160>
					lcdSendByte(lcdController, DATA, newCharToDisplay);
				}
				break;

			default:
				break;
 80040e6:	e074      	b.n	80041d2 <lcdControllerUpdate+0x1fe>
				if(lcdController->byteSended == TRUE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d119      	bne.n	8004126 <lcdControllerUpdate+0x152>
					lcdController->countDelay = TRUE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
					if(lcdController->delayCounter >= DELAY_100_MICRO_SECONDS)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004100:	2b09      	cmp	r3, #9
 8004102:	d963      	bls.n	80041cc <lcdControllerUpdate+0x1f8>
						lcdController->countDelay = FALSE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
						lcdController->delayCounter = 0;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
						lcdController->byteSended = FALSE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
						lcdController->byteToSend = DATA;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
				break;
 8004124:	e052      	b.n	80041cc <lcdControllerUpdate+0x1f8>
					lcdSendByte(lcdController, COMMAND, position);
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	461a      	mov	r2, r3
 800412a:	2100      	movs	r1, #0
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7ff f9e3 	bl	80034f8 <lcdSendByte>
				break;
 8004132:	e04b      	b.n	80041cc <lcdControllerUpdate+0x1f8>
				if(lcdController->byteSended == TRUE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800413a:	2b01      	cmp	r3, #1
 800413c:	d13d      	bne.n	80041ba <lcdControllerUpdate+0x1e6>
					lcdController->countDelay = TRUE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
					if(lcdController->delayCounter >= DELAY_100_MICRO_SECONDS)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800414c:	2b09      	cmp	r3, #9
 800414e:	d93f      	bls.n	80041d0 <lcdControllerUpdate+0x1fc>
						lcdController->countDelay = FALSE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
						lcdController->delayCounter = 0;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
						lcdController->byteSended = FALSE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
						lcdController->byteToSend = COMMAND;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
						lcdController->updatePosition = FALSE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
						lcdController->stringMatrixShow[lcdController->currentRow][lcdController->currentColumm] = lcdController->stringMatrixBuffer[lcdController->currentRow][lcdController->currentColumm];
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800417e:	4618      	mov	r0, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8004186:	461d      	mov	r5, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800418e:	4619      	mov	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8004196:	461c      	mov	r4, r3
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	4603      	mov	r3, r0
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	4403      	add	r3, r0
 80041a0:	4413      	add	r3, r2
 80041a2:	442b      	add	r3, r5
 80041a4:	7818      	ldrb	r0, [r3, #0]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	440b      	add	r3, r1
 80041ae:	4413      	add	r3, r2
 80041b0:	4423      	add	r3, r4
 80041b2:	3344      	adds	r3, #68	; 0x44
 80041b4:	4602      	mov	r2, r0
 80041b6:	701a      	strb	r2, [r3, #0]
				break;
 80041b8:	e00a      	b.n	80041d0 <lcdControllerUpdate+0x1fc>
					lcdSendByte(lcdController, DATA, newCharToDisplay);
 80041ba:	7b7b      	ldrb	r3, [r7, #13]
 80041bc:	461a      	mov	r2, r3
 80041be:	2101      	movs	r1, #1
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7ff f999 	bl	80034f8 <lcdSendByte>
				break;
 80041c6:	e003      	b.n	80041d0 <lcdControllerUpdate+0x1fc>
		}
	}
 80041c8:	bf00      	nop
 80041ca:	e002      	b.n	80041d2 <lcdControllerUpdate+0x1fe>
				break;
 80041cc:	bf00      	nop
 80041ce:	e000      	b.n	80041d2 <lcdControllerUpdate+0x1fe>
				break;
 80041d0:	bf00      	nop
}
 80041d2:	bf00      	nop
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bdb0      	pop	{r4, r5, r7, pc}

080041da <lcdControllerSetString>:

void lcdControllerSetString(LcdController *lcdController, LcdRow lcdRow, uint8_t *string)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b086      	sub	sp, #24
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	460b      	mov	r3, r1
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	72fb      	strb	r3, [r7, #11]
	uint8_t stringLength = strlen((char *) string);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7fc f80b 	bl	8000204 <strlen>
 80041ee:	4603      	mov	r3, r0
 80041f0:	75fb      	strb	r3, [r7, #23]
	switch (lcdRow)
 80041f2:	7afb      	ldrb	r3, [r7, #11]
 80041f4:	2bd0      	cmp	r3, #208	; 0xd0
 80041f6:	d035      	beq.n	8004264 <lcdControllerSetString+0x8a>
 80041f8:	2bd0      	cmp	r3, #208	; 0xd0
 80041fa:	dc42      	bgt.n	8004282 <lcdControllerSetString+0xa8>
 80041fc:	2bc0      	cmp	r3, #192	; 0xc0
 80041fe:	d013      	beq.n	8004228 <lcdControllerSetString+0x4e>
 8004200:	2bc0      	cmp	r3, #192	; 0xc0
 8004202:	dc3e      	bgt.n	8004282 <lcdControllerSetString+0xa8>
 8004204:	2b80      	cmp	r3, #128	; 0x80
 8004206:	d002      	beq.n	800420e <lcdControllerSetString+0x34>
 8004208:	2b90      	cmp	r3, #144	; 0x90
 800420a:	d01c      	beq.n	8004246 <lcdControllerSetString+0x6c>
			memset((char *) lcdController->stringMatrixBuffer[3], ' ', QTY_OF_CHARS_PER_ROW);
			strncpy((char *) lcdController->stringMatrixBuffer[3], (char *) string, stringLength);
			break;

		default:
			break;
 800420c:	e039      	b.n	8004282 <lcdControllerSetString+0xa8>
			memset((char *) lcdController->stringMatrixBuffer[0], ' ', QTY_OF_CHARS_PER_ROW);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2210      	movs	r2, #16
 8004212:	2120      	movs	r1, #32
 8004214:	4618      	mov	r0, r3
 8004216:	f000 f8f1 	bl	80043fc <memset>
			strncpy((char *) lcdController->stringMatrixBuffer[0], (char *) string, stringLength);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	7dfa      	ldrb	r2, [r7, #23]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4618      	mov	r0, r3
 8004222:	f000 f8f3 	bl	800440c <strncpy>
			break;
 8004226:	e02d      	b.n	8004284 <lcdControllerSetString+0xaa>
			memset((char *) lcdController->stringMatrixBuffer[1], ' ', QTY_OF_CHARS_PER_ROW);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3311      	adds	r3, #17
 800422c:	2210      	movs	r2, #16
 800422e:	2120      	movs	r1, #32
 8004230:	4618      	mov	r0, r3
 8004232:	f000 f8e3 	bl	80043fc <memset>
			strncpy((char *) lcdController->stringMatrixBuffer[1], (char *) string, stringLength);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3311      	adds	r3, #17
 800423a:	7dfa      	ldrb	r2, [r7, #23]
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	4618      	mov	r0, r3
 8004240:	f000 f8e4 	bl	800440c <strncpy>
			break;
 8004244:	e01e      	b.n	8004284 <lcdControllerSetString+0xaa>
			memset((char *) lcdController->stringMatrixBuffer[2], ' ', QTY_OF_CHARS_PER_ROW);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3322      	adds	r3, #34	; 0x22
 800424a:	2210      	movs	r2, #16
 800424c:	2120      	movs	r1, #32
 800424e:	4618      	mov	r0, r3
 8004250:	f000 f8d4 	bl	80043fc <memset>
			strncpy((char *) lcdController->stringMatrixBuffer[2], (char *) string, stringLength);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3322      	adds	r3, #34	; 0x22
 8004258:	7dfa      	ldrb	r2, [r7, #23]
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	4618      	mov	r0, r3
 800425e:	f000 f8d5 	bl	800440c <strncpy>
			break;
 8004262:	e00f      	b.n	8004284 <lcdControllerSetString+0xaa>
			memset((char *) lcdController->stringMatrixBuffer[3], ' ', QTY_OF_CHARS_PER_ROW);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	3333      	adds	r3, #51	; 0x33
 8004268:	2210      	movs	r2, #16
 800426a:	2120      	movs	r1, #32
 800426c:	4618      	mov	r0, r3
 800426e:	f000 f8c5 	bl	80043fc <memset>
			strncpy((char *) lcdController->stringMatrixBuffer[3], (char *) string, stringLength);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3333      	adds	r3, #51	; 0x33
 8004276:	7dfa      	ldrb	r2, [r7, #23]
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 f8c6 	bl	800440c <strncpy>
			break;
 8004280:	e000      	b.n	8004284 <lcdControllerSetString+0xaa>
			break;
 8004282:	bf00      	nop
	}
}
 8004284:	bf00      	nop
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <lcdControllerSetBacklight>:

void lcdControllerSetBacklight(LcdController *lcdController, BacklightPercent backlightPercent)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	70fb      	strb	r3, [r7, #3]
	__HAL_TIM_SET_COMPARE(lcdController->backlightPwmTimer, lcdController->backlightPwmChannel, backlightPercent);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <lcdControllerSetBacklight+0x24>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	78fa      	ldrb	r2, [r7, #3]
 80042ac:	635a      	str	r2, [r3, #52]	; 0x34
}
 80042ae:	e01d      	b.n	80042ec <lcdControllerSetBacklight+0x60>
	__HAL_TIM_SET_COMPARE(lcdController->backlightPwmTimer, lcdController->backlightPwmChannel, backlightPercent);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d106      	bne.n	80042c8 <lcdControllerSetBacklight+0x3c>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80042c6:	e011      	b.n	80042ec <lcdControllerSetBacklight+0x60>
	__HAL_TIM_SET_COMPARE(lcdController->backlightPwmTimer, lcdController->backlightPwmChannel, backlightPercent);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d106      	bne.n	80042e0 <lcdControllerSetBacklight+0x54>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	78fb      	ldrb	r3, [r7, #3]
 80042dc:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80042de:	e005      	b.n	80042ec <lcdControllerSetBacklight+0x60>
	__HAL_TIM_SET_COMPARE(lcdController->backlightPwmTimer, lcdController->backlightPwmChannel, backlightPercent);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	6413      	str	r3, [r2, #64]	; 0x40
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <lcdControllerOnOff>:

void lcdControllerOnOff(LcdController *lcdController, LcdOnOff lcdOnOff)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcdController->onOffPort, lcdController->onOffPin, lcdOnOff);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8b3 30e4 	ldrh.w	r3, [r3, #228]	; 0xe4
 8004310:	78fa      	ldrb	r2, [r7, #3]
 8004312:	4619      	mov	r1, r3
 8004314:	f7fd f880 	bl	8001418 <HAL_GPIO_WritePin>
}
 8004318:	bf00      	nop
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <lcdControllerGetDelayStatus>:
	lcdControllerSetString(lcdController, ROW_2, (uint8_t *) "                ");
	lcdControllerSetString(lcdController, ROW_3, (uint8_t *) "                ");
}

Bool lcdControllerGetDelayStatus(LcdController *lcdController)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
	return lcdController->countDelay;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
}
 800432e:	4618      	mov	r0, r3
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <lcdControllerIncrementDelayCounter>:

void lcdControllerIncrementDelayCounter(LcdController *lcdController)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
	lcdController->delayCounter++;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <lcdControllerGetEnableDelayStatus>:

Bool lcdControllerGetEnableDelayStatus(LcdController *lcdController)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
	return lcdController->countEnableDelay;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <lcdControllerIncrementEnableDelayCounter>:

void lcdControllerIncrementEnableDelayCounter(LcdController *lcdController)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
	lcdController->delayCounterEnable++;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <lcdControllerIsInitialized>:

Bool lcdControllerIsInitialized(LcdController *lcdController)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	return lcdController->initialized;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <__libc_init_array>:
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	4d0d      	ldr	r5, [pc, #52]	; (80043ec <__libc_init_array+0x38>)
 80043b8:	4c0d      	ldr	r4, [pc, #52]	; (80043f0 <__libc_init_array+0x3c>)
 80043ba:	1b64      	subs	r4, r4, r5
 80043bc:	10a4      	asrs	r4, r4, #2
 80043be:	2600      	movs	r6, #0
 80043c0:	42a6      	cmp	r6, r4
 80043c2:	d109      	bne.n	80043d8 <__libc_init_array+0x24>
 80043c4:	4d0b      	ldr	r5, [pc, #44]	; (80043f4 <__libc_init_array+0x40>)
 80043c6:	4c0c      	ldr	r4, [pc, #48]	; (80043f8 <__libc_init_array+0x44>)
 80043c8:	f000 f834 	bl	8004434 <_init>
 80043cc:	1b64      	subs	r4, r4, r5
 80043ce:	10a4      	asrs	r4, r4, #2
 80043d0:	2600      	movs	r6, #0
 80043d2:	42a6      	cmp	r6, r4
 80043d4:	d105      	bne.n	80043e2 <__libc_init_array+0x2e>
 80043d6:	bd70      	pop	{r4, r5, r6, pc}
 80043d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043dc:	4798      	blx	r3
 80043de:	3601      	adds	r6, #1
 80043e0:	e7ee      	b.n	80043c0 <__libc_init_array+0xc>
 80043e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e6:	4798      	blx	r3
 80043e8:	3601      	adds	r6, #1
 80043ea:	e7f2      	b.n	80043d2 <__libc_init_array+0x1e>
 80043ec:	08004494 	.word	0x08004494
 80043f0:	08004494 	.word	0x08004494
 80043f4:	08004494 	.word	0x08004494
 80043f8:	08004498 	.word	0x08004498

080043fc <memset>:
 80043fc:	4402      	add	r2, r0
 80043fe:	4603      	mov	r3, r0
 8004400:	4293      	cmp	r3, r2
 8004402:	d100      	bne.n	8004406 <memset+0xa>
 8004404:	4770      	bx	lr
 8004406:	f803 1b01 	strb.w	r1, [r3], #1
 800440a:	e7f9      	b.n	8004400 <memset+0x4>

0800440c <strncpy>:
 800440c:	b510      	push	{r4, lr}
 800440e:	3901      	subs	r1, #1
 8004410:	4603      	mov	r3, r0
 8004412:	b132      	cbz	r2, 8004422 <strncpy+0x16>
 8004414:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004418:	f803 4b01 	strb.w	r4, [r3], #1
 800441c:	3a01      	subs	r2, #1
 800441e:	2c00      	cmp	r4, #0
 8004420:	d1f7      	bne.n	8004412 <strncpy+0x6>
 8004422:	441a      	add	r2, r3
 8004424:	2100      	movs	r1, #0
 8004426:	4293      	cmp	r3, r2
 8004428:	d100      	bne.n	800442c <strncpy+0x20>
 800442a:	bd10      	pop	{r4, pc}
 800442c:	f803 1b01 	strb.w	r1, [r3], #1
 8004430:	e7f9      	b.n	8004426 <strncpy+0x1a>
	...

08004434 <_init>:
 8004434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004436:	bf00      	nop
 8004438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443a:	bc08      	pop	{r3}
 800443c:	469e      	mov	lr, r3
 800443e:	4770      	bx	lr

08004440 <_fini>:
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	bf00      	nop
 8004444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004446:	bc08      	pop	{r3}
 8004448:	469e      	mov	lr, r3
 800444a:	4770      	bx	lr
